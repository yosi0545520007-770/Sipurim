{"version":3,"file":"sedra.js","sources":["../../../src/sedra.ts"],"sourcesContent":["/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * Many of the following algorithms were taken from hebrew calendar\n * routines by Maimonedes, from his Mishneh Torah, and implemented by\n *  Nachum Dershowitz                Department of Computer Science\n *  (217) 333-4219                   University of Illinois at Urbana-Champaign\n *  nachum@cs.uiuedu               1304 West Springfield Avenue\n *                                   Urbana, Illinois 61801\n *\n * The routines were included in the emacs 19 distribution.\n *\n */\nimport {HDate, months} from '@hebcal/hdate';\nimport {renderParshaName} from './parshaName';\nimport QuickLRU from 'quick-lru';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\nconst INCOMPLETE = 0;\nconst REGULAR = 1;\nconst COMPLETE = 2;\n\nfunction yearType(hyear: number): number {\n  const longC = HDate.longCheshvan(hyear);\n  const shortK = HDate.shortKislev(hyear);\n  if (longC && !shortK) {\n    return COMPLETE;\n  } else if (!longC && shortK) {\n    return INCOMPLETE;\n  } else {\n    return REGULAR;\n  }\n}\n\n/** The result from `Sedra.lookup()` */\nexport type SedraResult = {\n  /**\n   * Name of the parsha (or parshiyot) read on\n   * Hebrew date, e.g. `['Noach']` or `['Matot', 'Masei']`\n   */\n  parsha: string[];\n  /**\n   * True if this is a regular parasha HaShavua\n   * Torah reading, false if it's a special holiday reading\n   */\n  chag: boolean;\n  /**\n   * The parsha number (or numbers) using 1-indexing.\n   * A `number` for a regular (single) parsha, and a `number[]`\n   * for a doubled parsha.\n   * For Parashat *Bereshit*, `num` would be equal to `1`, and for\n   * *Matot-Masei* it would be `[42, 43]`\n   */\n  num?: number | number[];\n  /** The date of the Shabbat this parsha is read */\n  hdate: HDate;\n};\n\n/**\n * Represents Parashah HaShavua for an entire Hebrew year\n */\nexport class Sedra {\n  private readonly year: number;\n  private readonly il: boolean;\n  private readonly firstSaturday: number;\n  private readonly theSedraArray: readonly NumberOrString[];\n  private readonly yearKey: string;\n  /**\n   * Caculates the Parashah HaShavua for an entire Hebrew year\n   * @param hyear - Hebrew year (e.g. 5749)\n   * @param il - Use Israel sedra schedule (false for Diaspora)\n   */\n  constructor(hyear: number, il: boolean) {\n    hyear = +hyear;\n    this.year = hyear;\n\n    const rh0 = new HDate(1, months.TISHREI, hyear);\n    const rh = rh0.abs();\n    const rhDay = rh0.getDay() + 1;\n\n    // find the first Saturday on or after Rosh Hashana\n    this.firstSaturday = HDate.dayOnOrBefore(6, rh + 6);\n    const leap = +HDate.isLeapYear(hyear);\n    this.il = Boolean(il);\n\n    const type = yearType(hyear);\n    let key = `${leap}${rhDay}${type}`;\n    if (types[key]) {\n      this.theSedraArray = types[key];\n      this.yearKey = key;\n    } else {\n      key = key + +this.il; // cast to num, then concat\n      this.theSedraArray = types[key];\n      this.yearKey = key;\n    }\n\n    if (!this.theSedraArray) {\n      throw new Error(\n        `improper sedra year type ${key} calculated for ${hyear}`\n      );\n    }\n  }\n\n  /**\n   * Returns the parsha (or parshiyot) read on Hebrew date\n   * @deprecated Use {@link lookup} instead\n   * @param hd Hebrew date or R.D. days\n   */\n  get(hd: HDate | number): string[] {\n    return this.lookup(hd).parsha;\n  }\n\n  /**\n   * Looks up parsha for the date, then returns a translated or transliterated string\n   * @deprecated Use {@link lookup} instead\n   * @param hd Hebrew date or R.D. days\n   * @param [locale] Optional locale name (i.e: `'he'`, `'fr'`). Defaults to active locale\n   */\n  getString(hd: HDate | number, locale?: string): string {\n    const parsha = this.get(hd);\n    return renderParshaName(parsha, locale);\n  }\n\n  /**\n   * Checks to see if this day would be a regular parasha HaShavua\n   * Torah reading or special holiday reading\n   * @deprecated Use {@link lookup} instead\n   * @param hd Hebrew date or R.D. days\n   */\n  isParsha(hd: HDate | number): boolean {\n    return !this.lookup(hd).chag;\n  }\n\n  /**\n   * Returns the date that a parsha occurs\n   * or `null` if the parsha doesn't occur this year\n   * @param parsha if a `string`, specified with Sephardic transliterations\n   *  like `'Noach'` or `'Matot-Masei'`. If an array, must be a 1- or 2-element\n   *  array such as `['Noach']` or `['Matot', 'Masei']`. If a `number`, should\n   *  be a 0-based parsha index (`0` for Bereshit, `1` for Noach) or a negative\n   *  number for a doubled parsha (e.g. `-21` for Vayakhel-Pekudei)\n   */\n  find(parsha: number | string | string[]): HDate | null {\n    if (typeof parsha === 'number') {\n      if (parsha >= parshiot.length || (parsha < 0 && !isValidDouble(parsha))) {\n        throw new RangeError(`Invalid parsha number: ${parsha}`);\n      }\n      return this.findInternal(parsha);\n    } else if (typeof parsha === 'string') {\n      const num = parsha2id.get(parsha);\n      if (typeof num === 'number') {\n        return this.find(num);\n      } else if (parsha.indexOf('-') !== -1) {\n        if (parsha === CHMPESACH || parsha === CHMSUKOT) {\n          return this.findInternal(parsha);\n        }\n        return this.find(parsha.split('-'));\n      } else {\n        // try to find Saturday holiday like 'Yom Kippur'\n        return this.findInternal(parsha);\n      }\n    } else if (Array.isArray(parsha)) {\n      const plen = parsha.length;\n      if ((plen !== 1 && plen !== 2) || typeof parsha[0] !== 'string') {\n        throw new TypeError(\n          `Invalid parsha argument: ${JSON.stringify(parsha)}`\n        );\n      }\n      if (plen === 1) {\n        return this.find(parsha[0]);\n      }\n      const p1 = parsha[0];\n      const p2 = parsha[1];\n      const num1 = parsha2id.get(p1);\n      const num2 = parsha2id.get(p2);\n      if (\n        typeof num1 !== 'number' ||\n        typeof num2 !== 'number' ||\n        num2 !== num1 + 1 ||\n        !isValidDouble(-num1)\n      ) {\n        throw new RangeError(`Unrecognized parsha name: ${p1}-${p2}`);\n      }\n      return this.find(-num1);\n    }\n    return null; /* NOTREACHED */\n  }\n\n  private findInternal(parsha: NumberOrString): HDate | null {\n    const idx = this.theSedraArray.indexOf(parsha);\n    if (idx === -1) {\n      return null; // doesn't occur this year\n    }\n    return new HDate(this.firstSaturday + idx * 7);\n  }\n\n  /**\n   * Returns the date that a parsha (or its doubled or undoubled counterpart)\n   * occurs, or `null` if the parsha doesn't occur this year\n   */\n  findContaining(parsha: number | string): HDate | null {\n    const hdate = this.find(parsha);\n    if (hdate) {\n      return hdate;\n    }\n    if (typeof parsha === 'number') {\n      // a valid negative number (double parsha in a year where they are\n      // combined) would've been found above, and a invalid negative number\n      // would've thrown an error, so this parsha must be a positive number\n      // representing either p1 or p2\n      const p1 = -parsha;\n      if (isValidDouble(p1)) {\n        return this.find(p1);\n      } else {\n        // this must be the second individual parsha of a doubled pair\n        // for example 29 for Kedoshim, so check for -28 for Achrei Mot-Kedoshim\n        return this.find(p1 + 1);\n      }\n    } else {\n      const num = parsha2id.get(parsha);\n      if (num) {\n        // parsha is either the first or second individual parsha of\n        // a pair that is doubled this year\n        const p1 = -num;\n        if (isValidDouble(p1)) {\n          return this.find(p1);\n        } else {\n          return this.find(p1 + 1);\n        }\n      } else {\n        // this was indeed a doubled parsha, so return date of the first half\n        const [p1] = parsha.split('-');\n        return this.find(p1);\n      }\n    }\n  }\n\n  /**\n   * Returns the underlying annual sedra schedule.\n   * Used by `@hebcal/triennial`\n   */\n  getSedraArray(): readonly NumberOrString[] {\n    return this.theSedraArray;\n  }\n\n  /**\n   * R.D. date of the first Saturday on or after Rosh Hashana\n   */\n  getFirstSaturday(): number {\n    return this.firstSaturday;\n  }\n\n  getYear(): number {\n    return this.year;\n  }\n\n  /**\n   * Returns an object describing the parsha on the first Saturday on or after `hd`\n   * @param hd Hebrew date or R.D. days\n   */\n  lookup(hd: HDate | number): SedraResult {\n    const abs =\n      typeof hd === 'number' ? hd : HDate.isHDate(hd) ? hd.abs() : NaN;\n\n    if (isNaN(abs)) {\n      throw new TypeError(`Bad date argument: ${hd}`);\n    }\n\n    // find the first saturday on or after today's date\n    const saturday = HDate.dayOnOrBefore(6, abs + 6);\n\n    const weekNum = (saturday - this.firstSaturday) / 7;\n    const index = this.theSedraArray[weekNum];\n\n    if (typeof index === 'undefined') {\n      const sedra = getSedra(this.year + 1, this.il);\n      return sedra.lookup(saturday); // must be next year\n    }\n    const hdate = new HDate(saturday);\n    if (typeof index === 'string') {\n      // Shabbat has a chag. Return a description\n      return {parsha: [index], chag: true, hdate};\n    }\n    if (index >= 0) {\n      return {parsha: [parshiot[index]], chag: false, num: index + 1, hdate};\n    }\n\n    const p1 = D(index); // undouble the parsha\n    return {\n      parsha: [parshiot[p1], parshiot[p1 + 1]],\n      chag: false,\n      num: [p1 + 1, p1 + 2],\n      hdate,\n    };\n  }\n}\n\n/**\n * The 54 parshiyot of the Torah as transilterated strings.\n * parshiot[0] == 'Bereshit', parshiot[1] == 'Noach', parshiot[52] == \"Ha'azinu\".\n * @readonly\n * @type {string[]}\n */\nexport const parshiot: readonly string[] = [\n  'Bereshit',\n  'Noach',\n  'Lech-Lecha',\n  'Vayera',\n  'Chayei Sara',\n  'Toldot',\n  'Vayetzei',\n  'Vayishlach',\n  'Vayeshev',\n  'Miketz',\n  'Vayigash',\n  'Vayechi',\n  'Shemot',\n  'Vaera',\n  'Bo',\n  'Beshalach',\n  'Yitro',\n  'Mishpatim',\n  'Terumah',\n  'Tetzaveh',\n  'Ki Tisa',\n  'Vayakhel',\n  'Pekudei',\n  'Vayikra',\n  'Tzav',\n  'Shmini',\n  'Tazria',\n  'Metzora',\n  'Achrei Mot',\n  'Kedoshim',\n  'Emor',\n  'Behar',\n  'Bechukotai',\n  'Bamidbar',\n  'Nasso',\n  \"Beha'alotcha\",\n  \"Sh'lach\",\n  'Korach',\n  'Chukat',\n  'Balak',\n  'Pinchas',\n  'Matot',\n  'Masei',\n  'Devarim',\n  'Vaetchanan',\n  'Eikev',\n  \"Re'eh\",\n  'Shoftim',\n  'Ki Teitzei',\n  'Ki Tavo',\n  'Nitzavim',\n  'Vayeilech',\n  \"Ha'azinu\",\n] as const;\n\n// 0-based parsha IDs\nconst parsha2id = new Map<string, number>();\nfor (let id = 0; id < parshiot.length; id++) {\n  const name = parshiot[id];\n  parsha2id.set(name, id);\n}\n\n// 0-based parsha IDs\nconst doubles = [\n  21, // Vayakhel-Pekudei\n  26, // Tazria-Metzora\n  28, // Achrei Mot-Kedoshim\n  31, // Behar-Bechukotai\n  38, // Chukat-Balak\n  41, // Matot-Masei\n  50, // Nitzavim-Vayeilech\n];\n\n/**\n * @private\n * @param id a negative number\n */\nfunction isValidDouble(id: number): boolean {\n  return doubles.includes(-id);\n}\n\n/**\n * parsha doubler/undoubler\n * @private\n * @param p\n */\nfunction D(p: number): number {\n  return -p;\n}\n\nconst RH = 'Rosh Hashana'; // 0\nconst YK = 'Yom Kippur'; // 1\n\nconst SUKKOT = 'Sukkot'; // 0\nconst CHMSUKOT = 'Sukkot Shabbat Chol ha-Moed'; // 0\nconst SHMINI = 'Shmini Atzeret'; // 0\n\nconst PESACH = 'Pesach'; // 25\nconst PESACH1 = 'Pesach I';\nconst CHMPESACH = 'Pesach Shabbat Chol ha-Moed'; // 25\nconst PESACH7 = 'Pesach VII'; // 25\nconst PESACH8 = 'Pesach VIII';\nconst SHAVUOT = 'Shavuot'; // 33\n\n/**\n * Returns an array from start to end\n * @private\n * @param start beginning number, inclusive\n * @param stop ending number, inclusive\n */\nfunction range(start: number, stop: number): readonly number[] {\n  return Array.from({length: stop - start + 1}, (v, k) => k + start);\n}\n\ntype NumberOrString = number | string;\n\nconst yearStartVayeilech: readonly NumberOrString[] = [51, 52, CHMSUKOT];\nconst yearStartHaazinu: readonly NumberOrString[] = [52, YK, CHMSUKOT];\nconst yearStartRH: readonly NumberOrString[] = [RH, 52, SUKKOT, SHMINI];\nconst r020 = range(0, 20);\nconst r027 = range(0, 27);\nconst r3340 = range(33, 40);\nconst r4349 = range(43, 49);\nconst r4350 = range(43, 50);\n\n/**\n * The ordinary year types (keviot)\n * names are leap/nonleap - day - incomplete/regular/complete - diaspora/Israel\n * @private\n * @readonly\n */\nconst types: Record<string, readonly NumberOrString[]> = {\n  /* Hebrew year that starts on Monday, is `incomplete' (Heshvan and\n   * Kislev each have 29 days), and has Passover start on Tuesday. */\n  // e.g. 5753\n  '020': yearStartVayeilech.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    CHMPESACH,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    r3340,\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* Hebrew year that starts on Monday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Thursday. */\n  // e.g. 5756\n  '0220': yearStartVayeilech.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    CHMPESACH,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    33,\n    SHAVUOT,\n    range(34, 37),\n    D(38),\n    40,\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* Hebrew year that starts on Thursday, is `regular' (Heshvan has 29\n   * days and Kislev has 30 days), and has Passover start on Saturday. */\n  // e.g. 5701\n  '0510': yearStartHaazinu.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    PESACH1,\n    PESACH8,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    r3340,\n    D(41),\n    r4350\n  ),\n\n  /* Hebrew year that starts on Thursday, is `regular' (Heshvan has 29\n   * days and Kislev has 30 days), and has Passover start on Saturday. */\n  // e.g. 5745\n  '0511': yearStartHaazinu.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    PESACH,\n    25,\n    D(26),\n    D(28),\n    range(30, 40),\n    D(41),\n    r4350\n  ),\n\n  /* Hebrew year that starts on Thursday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Sunday. */\n  // e.g. 5754\n  '052': yearStartHaazinu.concat(\n    range(0, 24),\n    PESACH7,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    r3340,\n    D(41),\n    r4350\n  ),\n\n  /* Hebrew year that starts on Saturday, is `incomplete' (Heshvan and Kislev\n   * each have 29 days), and has Passover start on Sunday. */\n  // e.g. 5761\n  '070': yearStartRH.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    PESACH7,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    r3340,\n    D(41),\n    r4350\n  ),\n\n  /* Hebrew year that starts on Saturday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Tuesday. */\n  // e.g. 5716\n  '072': yearStartRH.concat(\n    r020,\n    D(21),\n    23,\n    24,\n    CHMPESACH,\n    25,\n    D(26),\n    D(28),\n    30,\n    D(31),\n    r3340,\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* --  The leap year types (keviot) -- */\n  /* Hebrew year that starts on Monday, is `incomplete' (Heshvan and\n   * Kislev each have 29 days), and has Passover start on Thursday. */\n  // e.g. 5746\n  '1200': yearStartVayeilech.concat(\n    r027,\n    CHMPESACH,\n    range(28, 33),\n    SHAVUOT,\n    range(34, 37),\n    D(38),\n    40,\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* Hebrew year that starts on Monday, is `incomplete' (Heshvan and\n   * Kislev each have 29 days), and has Passover start on Thursday. */\n  // e.g. 5746\n  '1201': yearStartVayeilech.concat(\n    r027,\n    CHMPESACH,\n    range(28, 40),\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* Hebrew year that starts on Monday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Saturday. */\n  // e.g.5752\n  '1220': yearStartVayeilech.concat(\n    r027,\n    PESACH1,\n    PESACH8,\n    range(28, 40),\n    D(41),\n    r4350\n  ),\n\n  /* Hebrew year that starts on Monday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Saturday. */\n  // e.g.5752\n  '1221': yearStartVayeilech.concat(r027, PESACH, range(28, 50)),\n\n  /* Hebrew year that starts on Thursday, is `incomplete' (Heshvan and\n   * Kislev both have 29 days), and has Passover start on Sunday. */\n  // e.g. 5768\n  '150': yearStartHaazinu.concat(range(0, 28), PESACH7, range(29, 50)),\n\n  /* Hebrew year that starts on Thursday, is `complete' (Heshvan and\n   * Kislev both have 30 days), and has Passover start on Tuesday. */\n  // eg. 5771\n  '152': yearStartHaazinu.concat(range(0, 28), CHMPESACH, range(29, 49), D(50)),\n\n  /* Hebrew year that starts on Saturday, is `incomplete' (Heshvan and\n   * Kislev each have 29 days), and has Passover start on Tuesday. */\n  // e.g.5757\n  '170': yearStartRH.concat(\n    r027,\n    CHMPESACH,\n    range(28, 40),\n    D(41),\n    r4349,\n    D(50)\n  ),\n\n  /* Hebrew year that starts on Saturday, is `complete' (Heshvan and\n   * Kislev each have 30 days), and has Passover start on Thursday. */\n  '1720': yearStartRH.concat(\n    r027,\n    CHMPESACH,\n    range(28, 33),\n    SHAVUOT,\n    range(34, 37),\n    D(38),\n    40,\n    D(41),\n    r4349,\n    D(50)\n  ),\n} as const;\n\n/* Hebrew year that starts on Monday, is `complete' (Heshvan and\n * Kislev each have 30 days), and has Passover start on Thursday. */\ntypes['0221'] = types['020'];\n\n/* Hebrew year that starts on Tuesday, is `regular' (Heshvan has 29\n * days and Kislev has 30 days), and has Passover start on Thursday. */\n// e.g. 5715\ntypes['0310'] = types['0220'];\n\n/* Hebrew year that starts on Tuesday, is `regular' (Heshvan has 29\n * days and Kislev has 30 days), and has Passover start on Thursday. */\ntypes['0311'] = types['020'];\n\n/* Hebrew year that starts on Tuesday, is `regular' (Heshvan has 29\n * days and Kislev has 30 days), and has Passover start on Saturday. */\n// e.g. 5715\ntypes['1310'] = types['1220'];\n/* Hebrew year that starts on Tuesday, is `regular' (Heshvan has 29\n * days and Kislev has 30 days), and has Passover start on Saturday. */\ntypes['1311'] = types['1221'];\n\n/* Hebrew year that starts on Saturday, is `complete' (Heshvan and\n * Kislev each have 30 days), and has Passover start on Thursday. */\ntypes['1721'] = types['170'];\n\nconst sedraCache = new QuickLRU<string, Sedra>({maxSize: 400});\n\n/**\n * Convenience function to create an instance of `Sedra` or reuse a previously\n * created and cached instance.\n * @param hyear\n * @param il\n */\nexport function getSedra(hyear: number, il: boolean): Sedra {\n  const cacheKey = `${hyear}-${il ? 1 : 0}`;\n  let sedra = sedraCache.get(cacheKey);\n  if (!sedra) {\n    sedra = new Sedra(hyear, il);\n    sedraCache.set(cacheKey, sedra);\n  }\n  return sedra;\n}\n"],"names":[],"mappings":"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"}