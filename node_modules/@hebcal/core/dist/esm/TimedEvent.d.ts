import { HDate } from '@hebcal/hdate';
import { CalOptions } from './CalOptions';
import { Location } from './location';
import { Event } from './event';
import './locale';
/** An event that has an `eventTime` and `eventTimeStr` */
export declare class TimedEvent extends Event {
    readonly eventTime: Date;
    readonly location: Location;
    readonly eventTimeStr: string;
    readonly fmtTime: string;
    readonly linkedEvent?: Event;
    /**
     * @param desc Description (not translated)
     */
    constructor(date: HDate, desc: string, mask: number, eventTime: Date, location: Location, linkedEvent?: Event, options?: CalOptions);
    /**
     * @param [locale] Optional locale name (defaults to active locale).
     */
    render(locale?: string): string;
    /**
     * Returns translation of "Candle lighting" without the time.
     * @param [locale] Optional locale name (defaults to active locale).
     */
    renderBrief(locale?: string): string;
    getCategories(): string[];
}
/** Candle lighting before Shabbat or holiday */
export declare class CandleLightingEvent extends TimedEvent {
    constructor(date: HDate, mask: number, eventTime: Date, location: Location, linkedEvent?: Event, options?: CalOptions);
    getEmoji(): string;
}
/** Havdalah after Shabbat or holiday */
export declare class HavdalahEvent extends TimedEvent {
    private readonly havdalahMins?;
    constructor(date: HDate, mask: number, eventTime: Date, location: Location, havdalahMins?: number, linkedEvent?: Event, options?: CalOptions);
    /**
     * @param [locale] Optional locale name (defaults to active locale).
     */
    render(locale?: string): string;
    /**
     * Returns translation of "Havdalah" without the time.
     * @param [locale] Optional locale name (defaults to active locale).
     */
    renderBrief(locale?: string): string;
    getEmoji(): string;
}
