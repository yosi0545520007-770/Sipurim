{"version":3,"file":"event.js","sources":["../../../src/event.ts"],"sourcesContent":["import {HDate, Locale} from '@hebcal/hdate';\nimport './locale'; // Adds Hebrew and Ashkenazic translations\n\n/**\n * Holiday flags for Event. These flags are typically\n * combined using bitwise arithmetic to form a mask.\n * @readonly\n * @enum {number}\n */\nexport const flags = {\n  /** Chag, yontiff, yom tov */\n  CHAG: 0x000001,\n  /** Light candles 18 minutes before sundown */\n  LIGHT_CANDLES: 0x000002,\n  /** End of holiday (end of Yom Tov)  */\n  YOM_TOV_ENDS: 0x000004,\n  /** Observed only in the Diaspora (chutz l'aretz)  */\n  CHUL_ONLY: 0x000008,\n  /** Observed only in Israel */\n  IL_ONLY: 0x000010,\n  /** Light candles in the evening at Tzeit time (3 small stars) */\n  LIGHT_CANDLES_TZEIS: 0x000020,\n  /** Candle-lighting for Chanukah */\n  CHANUKAH_CANDLES: 0x000040,\n  /** Rosh Chodesh, beginning of a new Hebrew month */\n  ROSH_CHODESH: 0x000080,\n  /** Minor fasts like Tzom Tammuz, Ta'anit Esther, ... */\n  MINOR_FAST: 0x000100,\n  /** Shabbat Shekalim, Zachor, ... */\n  SPECIAL_SHABBAT: 0x000200,\n  /** Weekly sedrot on Saturdays */\n  PARSHA_HASHAVUA: 0x000400,\n  /** Daily page of Talmud (Bavli) */\n  DAF_YOMI: 0x000800,\n  /** Days of the Omer */\n  OMER_COUNT: 0x001000,\n  /** Yom HaShoah, Yom HaAtzma'ut, ... */\n  MODERN_HOLIDAY: 0x002000,\n  /** Yom Kippur and Tish'a B'Av */\n  MAJOR_FAST: 0x004000,\n  /** On the Saturday before Rosh Chodesh */\n  SHABBAT_MEVARCHIM: 0x008000,\n  /** Molad */\n  MOLAD: 0x010000,\n  /** Yahrzeit or Hebrew Anniversary */\n  USER_EVENT: 0x020000,\n  /** Daily Hebrew date (\"11th of Sivan, 5780\") */\n  HEBREW_DATE: 0x040000,\n  /** A holiday that's not major, modern, rosh chodesh, or a fast day */\n  MINOR_HOLIDAY: 0x080000,\n  /** Evening before a major or minor holiday */\n  EREV: 0x100000,\n  /** Chol haMoed, intermediate days of Pesach or Sukkot */\n  CHOL_HAMOED: 0x200000,\n  /** Mishna Yomi */\n  MISHNA_YOMI: 0x400000,\n  /** Yom Kippur Katan, minor day of atonement on the day preceeding each Rosh Chodesh */\n  YOM_KIPPUR_KATAN: 0x800000,\n  /** Daily page of Jerusalem Talmud (Yerushalmi) */\n  YERUSHALMI_YOMI: 0x1000000,\n  /** Nach Yomi */\n  NACH_YOMI: 0x2000000,\n  /** Daily Learning */\n  DAILY_LEARNING: 0x4000000,\n  /** Yizkor */\n  YIZKOR: 0x8000000,\n} as const;\n\nconst flagToCategory = [\n  [flags.MAJOR_FAST, 'holiday', 'major', 'fast'],\n  [flags.CHANUKAH_CANDLES, 'holiday', 'major'],\n  [flags.HEBREW_DATE, 'hebdate'],\n  [flags.MINOR_FAST, 'holiday', 'fast'],\n  [flags.MINOR_HOLIDAY, 'holiday', 'minor'],\n  [flags.MODERN_HOLIDAY, 'holiday', 'modern'],\n  [flags.MOLAD, 'molad'],\n  [flags.OMER_COUNT, 'omer'],\n  [flags.PARSHA_HASHAVUA, 'parashat'], // backwards-compat\n  [flags.ROSH_CHODESH, 'roshchodesh'],\n  [flags.SHABBAT_MEVARCHIM, 'mevarchim'],\n  [flags.SPECIAL_SHABBAT, 'holiday', 'shabbat'],\n  [flags.USER_EVENT, 'user'],\n  [flags.YIZKOR, 'yizkor'],\n] as const;\n\n/**\n * Represents an Event with a title, date, and flags.\n *\n * Events are used to represent holidays, candle-lighting times,\n * Torah readings, and more.\n *\n * To get the title of the event a language other than English\n * with Sephardic transliterations, use the `render()` method.\n */\nexport class Event {\n  /** Hebrew date of this event */\n  readonly date: HDate;\n  /**\n   * Untranslated title of this event. Note that these description\n   * strings are always in English and will remain stable across releases.\n   * To get the title of the event in another language, use the\n   * `render()` method.\n   */\n  readonly desc: string;\n  /** Bitmask of optional event flags. See {@link flags} */\n  readonly mask: number;\n  /** Optional emoji character such as ✡️, 🕯️, 🕎, 🕍, 🌒 */\n  emoji?: string;\n  /** Optional longer description or memo text */\n  memo?: string;\n  /** Alarms are used by iCalendar feeds */\n  alarm?: Date | string | boolean;\n  /**\n   * Constructs Event\n   * @param date Hebrew date event occurs\n   * @param desc Description (not translated)\n   * @param [mask=0] optional bitmask of holiday flags (see {@link flags})\n   * @param [attrs={}] optional additional attributes (e.g. `eventTimeStr`, `cholHaMoedDay`)\n   */\n  constructor(date: HDate, desc: string, mask = 0, attrs?: object) {\n    if (!HDate.isHDate(date)) {\n      throw new TypeError(`Invalid Event date: ${date}`);\n    } else if (typeof desc !== 'string') {\n      throw new TypeError(`Invalid Event description: ${desc}`);\n    }\n    this.date = date;\n    this.desc = desc;\n    this.mask = +mask;\n    if (typeof attrs === 'object' && attrs !== null) {\n      Object.assign(this, attrs);\n    }\n  }\n  /**\n   * Hebrew date of this event\n   */\n  getDate(): HDate {\n    return this.date;\n  }\n  /**\n   * Untranslated title of this event. Note that these description\n   * strings are always in English and will remain stable across releases.\n   * To get the title of the event in another language, use the\n   * `render()` method.\n   */\n  getDesc(): string {\n    return this.desc;\n  }\n  /**\n   * Bitmask of optional event flags. See {@link flags}\n   */\n  getFlags(): number {\n    return this.mask;\n  }\n  /**\n   * Returns (translated) description of this event\n   * @example\n   * const ev = new Event(new HDate(6, 'Sivan', 5749), 'Shavuot', flags.CHAG);\n   * ev.render('en'); // 'Shavuot'\n   * ev.render('he'); // 'שָׁבוּעוֹת'\n   * ev.render('ashkenazi'); // 'Shavuos'\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  render(locale?: string): string {\n    return Locale.gettext(this.desc, locale);\n  }\n  /**\n   * Returns a brief (translated) description of this event.\n   * For most events, this is the same as render(). For some events, it procudes\n   * a shorter text (e.g. without a time or added description).\n   * @param [locale] Optional locale name (defaults to active locale).\n   */\n  renderBrief(locale?: string): string {\n    return this.render(locale);\n  }\n  /**\n   * Optional holiday-specific Emoji or `null`.\n   */\n  getEmoji(): string | null {\n    return this.emoji || null;\n  }\n  /**\n   * Returns a simplified (untranslated) description for this event. For example,\n   * the `HolidayEvent` class supports\n   * \"Erev Pesach\" => \"Pesach\", and \"Sukkot III (CH''M)\" => \"Sukkot\".\n   * For many holidays the basename and the event description are the same.\n   */\n  basename(): string {\n    return this.getDesc();\n  }\n  /**\n   * Returns a URL to hebcal.com or sefaria.org for more detail on the event.\n   * Returns `undefined` for events with no detail page.\n   */\n  url(): string | undefined {\n    return undefined;\n  }\n  /**\n   * Is this event observed in Israel?\n   * @example\n   * const ev1 = new Event(new HDate(7, 'Sivan', 5749), 'Shavuot II', flags.CHAG | flags.CHUL_ONLY);\n   * ev1.observedInIsrael(); // false\n   * const ev2 = new Event(new HDate(26, 'Kislev', 5749), 'Chanukah: 3 Candles', 0);\n   * ev2.observedInIsrael(); // true\n   */\n  observedInIsrael(): boolean {\n    return !(this.mask & flags.CHUL_ONLY);\n  }\n  /**\n   * Is this event observed in the Diaspora?\n   * @example\n   * const ev1 = new Event(new HDate(7, 'Sivan', 5749), 'Shavuot II', flags.CHAG | flags.CHUL_ONLY);\n   * ev1.observedInDiaspora(); // true\n   * const ev2 = new Event(new HDate(26, 'Kislev', 5749), 'Chanukah: 3 Candles', 0);\n   * ev2.observedInDiaspora(); // true\n   */\n  observedInDiaspora(): boolean {\n    return !(this.mask & flags.IL_ONLY);\n  }\n  /**\n   * Is this event observed in Israel/Diaspora?\n   * @example\n   * const ev1 = new Event(new HDate(7, 'Sivan', 5749), 'Shavuot II', flags.CHAG | flags.CHUL_ONLY);\n   * ev1.observedIn(false); // true\n   * ev1.observedIn(true); // false\n   * const ev2 = new Event(new HDate(26, 'Kislev', 5749), 'Chanukah: 3 Candles', 0);\n   * ev2.observedIn(false); // true\n   * ev2.observedIn(true); // true\n   * @param il\n   */\n  observedIn(il: boolean): boolean {\n    return il ? this.observedInIsrael() : this.observedInDiaspora();\n  }\n  /**\n   * Makes a clone of this Event object\n   * @deprecated\n   */\n  clone(): Event {\n    const ev = new Event(this.date, this.desc, this.mask);\n    // overwrite all enumerable properties\n    Object.assign(ev, this);\n    return ev;\n  }\n  /**\n   * Returns a list of event categories\n   */\n  getCategories(): string[] {\n    const mask = this.getFlags();\n    for (const attrs of flagToCategory) {\n      const attr0 = attrs[0] as number;\n      if (mask & attr0) {\n        return attrs.slice(1) as string[];\n      }\n    }\n    return ['unknown'];\n  }\n}\n"],"names":[],"mappings":"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"}