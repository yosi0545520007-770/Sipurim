{"version":3,"file":"zmanim.js","sources":["../../../src/zmanim.ts"],"sourcesContent":["import 'temporal-polyfill/global';\nimport {GeoLocation, NOAACalculator} from '@hebcal/noaa';\nimport {\n  HDate,\n  getPseudoISO,\n  getTimezoneOffset,\n  isDate,\n  pad2,\n} from '@hebcal/hdate';\n\n/**\n * @private\n */\nfunction zdtToDate(zdt: Temporal.ZonedDateTime | null): Date {\n  if (zdt === null) {\n    return new Date(NaN);\n  }\n  const res = new Date(zdt.epochMilliseconds);\n  res.setMilliseconds(0);\n  return res;\n}\n\nfunction getDate(date: Date | HDate): Date {\n  if (isDate(date)) return date as Date;\n  if (HDate.isHDate(date)) return (date as HDate).greg();\n  throw new TypeError(`invalid date: ${date}`);\n}\n\n/**\n * Calculate halachic times (zmanim / זְמַנִּים) for a given day and location.\n * Calculations are available for tzeit / tzais (nightfall),\n * shkiah (sunset) and more.\n *\n * Zmanim are estimated using an algorithm published by the US National Oceanic\n * and Atmospheric Administration. The NOAA solar calculator is based on equations\n * from _Astronomical Algorithms_ by Jean Meeus.\n *\n * The sunrise and sunset results are theoretically accurate to within a minute for\n * locations between +/- 72° latitude, and within 10 minutes outside of those latitudes.\n * However, due to variations in atmospheric composition, temperature, pressure and\n * conditions, observed values may vary from calculations.\n * https://gml.noaa.gov/grad/solcalc/calcdetails.html\n *\n * @example\n * const {GeoLocation, Zmanim} = require('@hebcal/core');\n * const latitude = 41.822232;\n * const longitude = -71.448292;\n * const tzid = 'America/New_York';\n * const friday = new Date(2023, 8, 8);\n * const gloc = new GeoLocation(null, latitude, longitude, 0, tzid);\n * const zmanim = new Zmanim(gloc, friday, false);\n * const candleLighting = zmanim.sunsetOffset(-18, true);\n * const timeStr = Zmanim.formatISOWithTimeZone(tzid, candleLighting);\n */\nexport class Zmanim {\n  private readonly date: Date;\n  private readonly gloc: GeoLocation;\n  private readonly noaa: NOAACalculator;\n  private useElevation: boolean;\n  /**\n   * Initialize a Zmanim instance.\n   * @param gloc GeoLocation including latitude, longitude, and timezone\n   * @param date Regular or Hebrew Date. If `date` is a regular `Date`,\n   *    hours, minutes, seconds and milliseconds are ignored.\n   * @param useElevation use elevation for calculations (default `false`).\n   *    If `true`, use elevation to affect the calculation of all sunrise/sunset based\n   *    zmanim. Note: there are some zmanim such as degree-based zmanim that are driven\n   *    by the amount of light in the sky and are not impacted by elevation.\n   *    These zmanim intentionally do not support elevation adjustment.\n   */\n  constructor(gloc: GeoLocation, date: Date | HDate, useElevation: boolean) {\n    const dt = getDate(date);\n    this.date = dt;\n    this.gloc = gloc;\n    const plainDate = Temporal.PlainDate.from({\n      year: dt.getFullYear(),\n      month: dt.getMonth() + 1,\n      day: dt.getDate(),\n    });\n    this.noaa = new NOAACalculator(gloc, plainDate);\n    this.useElevation = Boolean(useElevation);\n  }\n  /**\n   * Returns `true` if elevation adjustment is enabled\n   * for zmanim support elevation adjustment\n   */\n  getUseElevation(): boolean {\n    return this.useElevation;\n  }\n  /**\n   * Enables or disables elevation adjustment for zmanim support elevation adjustment\n   * @param useElevation\n   */\n  setUseElevation(useElevation: boolean) {\n    this.useElevation = useElevation;\n  }\n  /**\n   * Convenience function to get the time when sun is above or below the horizon\n   * for a certain angle (in degrees).\n   * This function does not support elevation adjustment.\n   * @param angle\n   * @param rising\n   */\n  timeAtAngle(angle: number, rising: boolean): Date {\n    const offsetZenith = 90 + angle;\n    const zdt = rising\n      ? this.noaa.getSunriseOffsetByDegrees(offsetZenith)\n      : this.noaa.getSunsetOffsetByDegrees(offsetZenith);\n    return zdtToDate(zdt);\n  }\n  /**\n   * Upper edge of the Sun appears over the eastern horizon in the morning (0.833° above horizon)\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  sunrise(): Date {\n    const zdt = this.useElevation\n      ? this.noaa.getSunrise()\n      : this.noaa.getSeaLevelSunrise();\n    return zdtToDate(zdt);\n  }\n  /**\n   * Upper edge of the Sun appears over the eastern horizon in the morning (0.833° above horizon).\n   * This function does not support elevation adjustment.\n   */\n  seaLevelSunrise(): Date {\n    const zdt = this.noaa.getSeaLevelSunrise();\n    return zdtToDate(zdt);\n  }\n  /**\n   * When the upper edge of the Sun disappears below the horizon (0.833° below horizon).\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  sunset(): Date {\n    const zdt = this.useElevation\n      ? this.noaa.getSunset()\n      : this.noaa.getSeaLevelSunset();\n    return zdtToDate(zdt);\n  }\n  /**\n   * When the upper edge of the Sun disappears below the horizon (0.833° below horizon).\n   * This function does not support elevation adjustment.\n   */\n  seaLevelSunset(): Date {\n    const zdt = this.noaa.getSeaLevelSunset();\n    return zdtToDate(zdt);\n  }\n  /**\n   * Civil dawn; Sun is 6° below the horizon in the morning.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  dawn(): Date {\n    const zdt = this.noaa.getBeginCivilTwilight();\n    return zdtToDate(zdt);\n  }\n  /**\n   * Civil dusk; Sun is 6° below the horizon in the evening.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  dusk(): Date {\n    const zdt = this.noaa.getEndCivilTwilight();\n    return zdtToDate(zdt);\n  }\n  /**\n   * Returns sunset for the previous day.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  gregEve(): Date {\n    const prev = new Date(this.date);\n    prev.setDate(prev.getDate() - 1);\n    const zman = new Zmanim(this.gloc, prev, this.useElevation);\n    return zman.sunset();\n  }\n  /**\n   * @private\n   */\n  nightHour(): number {\n    return (this.sunrise().getTime() - this.gregEve().getTime()) / 12; // ms in hour\n  }\n  /**\n   * Midday – Chatzot; Sunrise plus 6 halachic hours\n   */\n  chatzot(): Date {\n    const startOfDay = this.noaa.getSeaLevelSunrise();\n    const endOfDay = this.noaa.getSeaLevelSunset();\n    const zdt = this.noaa.getSunTransit(startOfDay, endOfDay);\n    return zdtToDate(zdt);\n  }\n  /**\n   * Midnight – Chatzot; Sunset plus 6 halachic hours.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  chatzotNight(): Date {\n    return new Date(this.sunrise().getTime() - this.nightHour() * 6);\n  }\n  /**\n   * Dawn – Alot haShachar; Sun is 16.1° below the horizon in the morning.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  alotHaShachar(): Date {\n    return this.timeAtAngle(16.1, true);\n  }\n  /**\n   * Dawn – Alot haShachar; calculated as 72 minutes before sunrise or\n   * sea level sunrise.\n   */\n  alotHaShachar72(): Date {\n    return this.sunriseOffset(-72, false, false);\n  }\n  /**\n   * Earliest talis & tefillin – Misheyakir; Sun is 11.5° below the horizon in the morning.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  misheyakir(): Date {\n    return this.timeAtAngle(11.5, true);\n  }\n  /**\n   * Earliest talis & tefillin – Misheyakir Machmir; Sun is 10.2° below the horizon in the morning.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  misheyakirMachmir(): Date {\n    return this.timeAtAngle(10.2, true);\n  }\n  /**\n   * Utility method for using elevation-aware sunrise/sunset\n   * @private\n   * @param hours\n   */\n  getShaahZmanisBasedZman(hours: number): Date {\n    const startOfDay = this.useElevation\n      ? this.noaa.getSunrise()\n      : this.noaa.getSeaLevelSunrise();\n    const endOfDay = this.useElevation\n      ? this.noaa.getSunset()\n      : this.noaa.getSeaLevelSunset();\n    const temporalHour = this.noaa.getTemporalHour(startOfDay, endOfDay);\n    const offset = Math.round(temporalHour * hours);\n    const zdt = NOAACalculator.getTimeOffset(startOfDay, offset);\n    return zdtToDate(zdt);\n  }\n  /**\n   * Latest Shema (Gra); Sunrise plus 3 halachic hours, according to the Gra.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  sofZmanShma(): Date {\n    // Gra\n    return this.getShaahZmanisBasedZman(3);\n  }\n  /**\n   * Latest Shacharit (Gra); Sunrise plus 4 halachic hours, according to the Gra.\n   *\n   * This method returns the latest *zman tfila* (time to recite shema in the morning)\n   * that is 4 *shaos zmaniyos* (solar hours) after sunrise or sea level sunrise\n   * (depending on the `useElevation` setting), according\n   * to the [GRA](https://en.wikipedia.org/wiki/Vilna_Gaon).\n   *\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  sofZmanTfilla(): Date {\n    // Gra\n    return this.getShaahZmanisBasedZman(4);\n  }\n  /**\n   * Returns an array with alot (Date) and ms in hour (number)\n   * @private\n   */\n  getTemporalHour72(forceSeaLevel: boolean): [Date, number] {\n    const alot72 = this.sunriseOffset(-72, false, forceSeaLevel);\n    const tzeit72 = this.sunsetOffset(72, false, forceSeaLevel);\n    const temporalHour = (tzeit72.getTime() - alot72.getTime()) / 12;\n    return [alot72, temporalHour];\n  }\n  /**\n   * Returns an array with alot (Date) and ms in hour (number)\n   * @private\n   */\n  getTemporalHourByDeg(angle: number): [Date, number] {\n    const alot = this.timeAtAngle(angle, true);\n    const tzeit = this.timeAtAngle(angle, false);\n    const temporalHour = (tzeit.getTime() - alot.getTime()) / 12;\n    return [alot, temporalHour];\n  }\n  /**\n   * Latest Shema (MGA); Sunrise plus 3 halachic hours, according to Magen Avraham.\n   * Based on the opinion of the MGA that the day is calculated from\n   * dawn being fixed 72 minutes before sea-level sunrise, and nightfall is fixed\n   * 72 minutes after sea-level sunset.\n   */\n  sofZmanShmaMGA(): Date {\n    // Magen Avraham\n    const [alot72, temporalHour] = this.getTemporalHour72(true);\n    const offset = Math.floor(3 * temporalHour);\n    return new Date(alot72.getTime() + offset);\n  }\n  /**\n   * Latest Shema (MGA); Sunrise plus 3 halachic hours, according to Magen Avraham.\n   * Based on the opinion of the MGA that the day is calculated from\n   * dawn to nightfall with both being 16.1° below the horizon.\n   */\n  sofZmanShmaMGA16Point1(): Date {\n    const [alot, temporalHour] = this.getTemporalHourByDeg(16.1);\n    const offset = Math.floor(3 * temporalHour);\n    return new Date(alot.getTime() + offset);\n  }\n  /**\n   * Latest Shema (MGA); Sunrise plus 3 halachic hours, according to Magen Avraham.\n   * Based on the opinion of the MGA that the day is calculated from\n   * dawn to nightfall with both being 19.8° below the horizon.\n   *\n   * This calculation is based on the position of the sun 90 minutes after sunset in Jerusalem\n   * around the equinox / equilux which calculates to 19.8° below geometric zenith.\n   * https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\n   */\n  sofZmanShmaMGA19Point8(): Date {\n    const [alot, temporalHour] = this.getTemporalHourByDeg(19.8);\n    const offset = Math.floor(3 * temporalHour);\n    return new Date(alot.getTime() + offset);\n  }\n  /**\n   * Latest Shacharit (MGA); Sunrise plus 4 halachic hours, according to Magen Avraham\n   */\n  sofZmanTfillaMGA(): Date {\n    // Magen Avraham\n    const [alot72, temporalHour] = this.getTemporalHour72(true);\n    const offset = Math.floor(4 * temporalHour);\n    return new Date(alot72.getTime() + offset);\n  }\n  /**\n   * Latest Shacharit (MGA); Sunrise plus 4 halachic hours, according to Magen Avraham.\n   * Based on the opinion of the MGA that the day is calculated from\n   * dawn to nightfall with both being 16.1° below the horizon.\n   */\n  sofZmanTfillaMGA16Point1(): Date {\n    const [alot, temporalHour] = this.getTemporalHourByDeg(16.1);\n    const offset = Math.floor(4 * temporalHour);\n    return new Date(alot.getTime() + offset);\n  }\n  /**\n   * Latest Shacharit (MGA); Sunrise plus 4 halachic hours, according to Magen Avraham.\n   * Based on the opinion of the MGA that the day is calculated from\n   * dawn to nightfall with both being 19.8° below the horizon.\n   *\n   * This calculation is based on the position of the sun 90 minutes after sunset in Jerusalem\n   * around the equinox / equilux which calculates to 19.8° below geometric zenith.\n   * https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\n   */\n  sofZmanTfillaMGA19Point8(): Date {\n    const [alot, temporalHour] = this.getTemporalHourByDeg(19.8);\n    const offset = Math.floor(4 * temporalHour);\n    return new Date(alot.getTime() + offset);\n  }\n  /**\n   * Earliest Mincha – Mincha Gedola (GRA); Sunrise plus 6.5 halachic hours.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   *\n   * This method returns the latest mincha gedola, the earliest time one can pray mincha\n   * that is 6.5 shaos zmaniyos (solar hours) after sunrise or sea level sunrise\n   * (depending on the `useElevation` setting), according\n   * to the [GRA](https://en.wikipedia.org/wiki/Vilna_Gaon).\n   *\n   * The Ramba\"m is of the opinion that it is better to delay *mincha* until\n   * *mincha ketana* while the Ra\"sh, Tur, GRA and others are of the\n   * opinion that *mincha* can be prayed *lechatchila* starting at *mincha gedola*.\n   */\n  minchaGedola(): Date {\n    return this.getShaahZmanisBasedZman(6.5);\n  }\n  /**\n   * Earliest Mincha – Mincha Gedola (MGA); Sunrise plus 6.5 halachic hours.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   *\n   * This method returns the time of *mincha gedola* according to the Magen Avraham\n   * with the day starting 72 minutes before sunrise and ending 72 minutes after sunset.\n   * This is the earliest time to pray *mincha*.\n   */\n  minchaGedolaMGA(): Date {\n    const [alot72, temporalHour] = this.getTemporalHour72(false);\n    const offset = Math.floor(6.5 * temporalHour);\n    return new Date(alot72.getTime() + offset);\n  }\n  /**\n   * Preferable earliest time to recite Minchah – Mincha Ketana; Sunrise plus 9.5 halachic hours.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   *\n   * This method returns *mincha ketana*, the preferred earliest time to pray *mincha* in the\n   * opinion of the [Rambam](https://en.wikipedia.org/wiki/Maimonides) and others,\n   * that is 9.5 *shaos zmaniyos* (solar hours) after sunrise or sea level sunrise\n   * (depending on the `useElevation` setting), according\n   * to the [GRA](https://en.wikipedia.org/wiki/Vilna_Gaon).\n   */\n  minchaKetana(): Date {\n    return this.getShaahZmanisBasedZman(9.5);\n  }\n  /**\n   * This method returns the time of *mincha ketana* according to the Magen Avraham\n   * with the day starting 72 minutes before sunrise and ending 72 minutes after sunset.\n   * This is the preferred earliest time to pray *mincha* according to the opinion of\n   * the [Rambam](https://en.wikipedia.org/wiki/Maimonides) and others.\n   *\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  minchaKetanaMGA(): Date {\n    const [alot72, temporalHour] = this.getTemporalHour72(false);\n    return new Date(alot72.getTime() + Math.floor(9.5 * temporalHour));\n  }\n  /**\n   * Plag haMincha; Sunrise plus 10.75 halachic hours.\n   * If elevation is enabled, this function will include elevation in the calculation.\n   */\n  plagHaMincha(): Date {\n    return this.getShaahZmanisBasedZman(10.75);\n  }\n  /**\n   * @param [angle=8.5] optional time for solar depression.\n   *   Default is 8.5 degrees for 3 small stars, use 7.083 degrees for 3 medium-sized stars.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  tzeit(angle = 8.5): Date {\n    return this.timeAtAngle(angle, false);\n  }\n  /**\n   * Alias for sunrise\n   */\n  neitzHaChama(): Date {\n    return this.sunrise();\n  }\n  /**\n   * Alias for sunset\n   */\n  shkiah(): Date {\n    return this.sunset();\n  }\n  /**\n   * Rabbeinu Tam holds that bein hashmashos is a specific time\n   * between sunset and tzeis hakochavim.\n   * One opinion on how to calculate this time is that\n   * it is 13.5 minutes before tzies 7.083.\n   * Because degree-based functions estimate the amount of light in the sky,\n   * the result is not impacted by elevation.\n   */\n  beinHaShmashos(): Date {\n    const tzeit = this.tzeit(7.083);\n    const millis = tzeit.getTime();\n    if (isNaN(millis)) {\n      return tzeit;\n    }\n    return new Date(millis - 13.5 * 60 * 1000);\n  }\n  /**\n   * Uses timeFormat to return a date like '20:34'.\n   * Returns `XX:XX` if the date is invalid.\n   */\n  static formatTime(dt: Date, timeFormat: Intl.DateTimeFormat): string {\n    if (isNaN(dt.getTime())) {\n      return 'XX:XX'; // Invalid Date\n    }\n    const time = timeFormat.format(dt);\n    const hm = time.split(':');\n    if (hm[0] === '24') {\n      return '00:' + hm[1];\n    }\n    return time;\n  }\n\n  /**\n   * Discards seconds, rounding to nearest minute.\n   * @param dt\n   */\n  static roundTime(dt: Date): Date {\n    const millis = dt.getTime();\n    if (isNaN(millis)) {\n      return dt;\n    }\n    // Round up to next minute if needed\n    const millisOnly = dt.getMilliseconds();\n    const seconds = dt.getSeconds();\n    if (seconds === 0 && millisOnly === 0) {\n      return dt;\n    }\n    const secAndMillis = seconds * 1000 + millisOnly;\n    const delta =\n      secAndMillis >= 30000 ? 60000 - secAndMillis : -1 * secAndMillis;\n    return new Date(millis + delta);\n  }\n\n  /**\n   * Get offset string (like \"+05:00\" or \"-08:00\") from tzid (like \"Europe/Moscow\")\n   * @param tzid\n   * @param date\n   */\n  static timeZoneOffset(tzid: string, date: Date): string {\n    const offset = getTimezoneOffset(tzid, date);\n    const offsetAbs = Math.abs(offset);\n    const hours = Math.floor(offsetAbs / 60);\n    const minutes = offsetAbs % 60;\n    return (offset < 0 ? '+' : '-') + pad2(hours) + ':' + pad2(minutes);\n  }\n\n  /**\n   * Returns a string like \"2022-04-01T13:06:00-11:00\"\n   * @param tzid\n   * @param date\n   */\n  static formatISOWithTimeZone(tzid: string, date: Date): string {\n    if (isNaN(date.getTime())) {\n      return '0000-00-00T00:00:00Z';\n    }\n    return (\n      getPseudoISO(tzid, date).substring(0, 19) +\n      Zmanim.timeZoneOffset(tzid, date)\n    );\n  }\n\n  /**\n   * Returns sunrise + `offset` minutes (either positive or negative).\n   * If elevation is enabled, this function will include elevation in the calculation\n   *  unless `forceSeaLevel` is `true`.\n   * @param offset minutes\n   * @param roundMinute round time to nearest minute (default true)\n   * @param forceSeaLevel use sea-level sunrise (default false)\n   */\n  sunriseOffset(\n    offset: number,\n    roundMinute = true,\n    forceSeaLevel = false\n  ): Date {\n    const sunrise = forceSeaLevel ? this.seaLevelSunrise() : this.sunrise();\n    if (isNaN(sunrise.getTime())) {\n      return sunrise;\n    }\n    if (roundMinute) {\n      // For positive offsets only, round up to next minute if needed\n      if (offset > 0 && sunrise.getSeconds() >= 30) {\n        offset++;\n      }\n      sunrise.setSeconds(0, 0);\n    }\n    return new Date(sunrise.getTime() + offset * 60 * 1000);\n  }\n\n  /**\n   * Returns sunset + `offset` minutes (either positive or negative).\n   * If elevation is enabled, this function will include elevation in the calculation\n   *  unless `forceSeaLevel` is `true`.\n   * @param offset minutes\n   * @param roundMinute round time to nearest minute (default true)\n   * @param forceSeaLevel use sea-level sunset (default false)\n   */\n  sunsetOffset(\n    offset: number,\n    roundMinute = true,\n    forceSeaLevel = false\n  ): Date {\n    const sunset = forceSeaLevel ? this.seaLevelSunset() : this.sunset();\n    if (isNaN(sunset.getTime())) {\n      return sunset;\n    }\n    if (roundMinute) {\n      // For Havdalah only, round up to next minute if needed\n      if (offset > 0 && sunset.getSeconds() >= 30) {\n        offset++;\n      }\n      sunset.setSeconds(0, 0);\n    }\n    return new Date(sunset.getTime() + offset * 60 * 1000);\n  }\n  /**\n   * Returns the Hebrew date relative to the specified location and Gregorian date,\n   * taking into consideration whether the time is before or after sunset.\n   *\n   * For example, if the given date and is `2024-09-22T10:35` (before sunset), and\n   * sunset for the specified location is **19:04**, then this function would\n   * return a Hebrew date of `19th of Elul, 5784`.\n   * If the given date is the same Gregorian day after sunset\n   * (for example `2024-09-22T20:07`), this function would return a\n   * Hebrew date of `20th of Elul, 5784`.\n   * @example\n   * const {GeoLocation, Zmanim, HDate} = require('@hebcal/core');\n   * const latitude = 48.85341;\n   * const longitude = 2.3488;\n   * const timezone = 'Europe/Paris';\n   * const gloc = new GeoLocation(null, latitude, longitude, 0, timezone);\n   * const before = Zmanim.makeSunsetAwareHDate(gloc, new Date('2024-09-22T17:38:46.123Z'), false);\n   * console.log(before.toString()); // '19 Elul 5784'\n   * const after = Zmanim.makeSunsetAwareHDate(gloc, new Date('2024-09-22T23:45:18.345Z'), false);\n   * console.log(after.toString()); // '20 Elul 5784'\n   */\n  static makeSunsetAwareHDate(\n    gloc: GeoLocation,\n    date: Date,\n    useElevation: boolean\n  ): HDate {\n    const zmanim = new Zmanim(gloc, date, useElevation);\n    const sunset = zmanim.sunset();\n    let hd = new HDate(date);\n    const sunsetMillis = sunset.getTime();\n    if (isNaN(sunsetMillis)) {\n      return hd;\n    }\n    if (date.getTime() >= sunsetMillis) {\n      hd = hd.next();\n    }\n    return hd;\n  }\n}\n"],"names":[],"mappings":"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"}