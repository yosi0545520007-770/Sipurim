{"version":3,"file":"hdate.js","sources":["../../../src/hdate.ts"],"sourcesContent":["/*\n    Hebcal - A Jewish Calendar Generator\n    Copyright (c) 1994-2020 Danny Sadinoff\n    Portions copyright Eyal Schachter and Michael J. Radwin\n\n    https://github.com/hebcal/hebcal-es6\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport {\n  MonthName,\n  SimpleHebrewDate,\n  abs2hebrew,\n  daysInMonth,\n  daysInYear,\n  getMonthName,\n  hebrew2abs,\n  isLeapYear,\n  longCheshvan,\n  monthFromName,\n  months,\n  monthsInYear,\n  shortKislev,\n} from './hdateBase';\nimport {abs2greg, greg2abs, isDate} from './greg';\nimport {gematriya, gematriyaStrToNum} from './gematriya';\nimport {Locale} from './locale';\n\nfunction mod(x: number, y: number): number {\n  return x - y * Math.floor(x / y);\n}\n\nfunction isSimpleHebrewDate(obj: unknown): obj is SimpleHebrewDate {\n  return (obj as SimpleHebrewDate).yy !== undefined;\n}\n\nconst UNITS_DAY = 'day';\nconst UNITS_WEEK = 'week';\nconst UNITS_MONTH = 'month';\nconst UNITS_YEAR = 'year';\n\ntype ToFlexibleUnit<U extends TimeUnit> =\n  | U\n  | `${U}s`\n  | Uppercase<U>\n  | Uppercase<`${U}s`>\n  | Capitalize<U>\n  | Capitalize<`${U}s`>\n  | (U extends 'month' ? 'M' : FirstChar<U>);\n\ntype FirstChar<S extends string> = S extends `${infer FirstLetter}${string}`\n  ? FirstLetter\n  : never;\ntype Capitalize<S extends string> =\n  S extends `${infer FirstLetter}${infer Rest}`\n    ? `${Uppercase<FirstLetter>}${Rest}`\n    : never;\n\ntype TimeUnit =\n  | typeof UNITS_DAY\n  | typeof UNITS_WEEK\n  | typeof UNITS_MONTH\n  | typeof UNITS_YEAR;\n\n/** Units that can be passed to `add()` and similar methods. */\nexport type FlexibleTimeUnit = ToFlexibleUnit<TimeUnit>;\n\n/**\n * A `HDate` represents a Hebrew calendar date.\n *\n * An instance of this class encapsulates a date in the Hebrew calendar system.\n * It consists of a year, month, and day, without any associated time or location data.\n * The Hebrew calendar is a lunisolar calendar, meaning it is based on both lunar and solar cycles.\n *\n * A Hebrew date internally stores three numbers:\n * - year: The Hebrew year (1-9999). Counted from the traditional Hebrew date of creation (3761 BCE in the Gregorian calendar)\n * - month: The Hebrew month (1-13). Month 1 is Nisan, month 7 is Tishrei. There are 12 months in a regular year and 13 months in a leap year.\n * - day: The day of the month (1-30)\n *\n * This class uses Rata Die to convert between the Hebrew and Gregorian calendars.\n *\n * To calculate times of day, use `Zmanim` class from `@hebcal/core`\n * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n * @see {@link https://hebcal.github.io/api/core/classes/Zmanim.html | Zmanim}\n */\nexport class HDate {\n  /** Hebrew year, 1-9999 */\n  yy: number;\n  /** Hebrew month of year (1=NISAN, 7=TISHREI) */\n  mm: number;\n  /** Hebrew day within the month (1-30) */\n  dd: number;\n  /** absolute Rata Die (R.D.) days */\n  rd?: number;\n\n  /**\n   * Create a Hebrew date. There are 3 basic forms for the `HDate()` constructor.\n   *\n   * 1. No parameters - represents the current Hebrew date at time of instantiation\n   * 2. One parameter\n   *    * `Date` - represents the Hebrew date corresponding to the Gregorian date using\n   *       local time. Hours, minutes, seconds and milliseconds are ignored.\n   *    * `HDate` - clones a copy of the given Hebrew date\n   *    * `number` - Converts absolute R.D. days to Hebrew date.\n   *       R.D. 1 == the imaginary date January 1, 1 (Gregorian)\n   * 3. Three parameters: Hebrew day, Hebrew month, Hebrew year. Hebrew day should\n   *    be a number between 1-30, Hebrew month can be a number or string, and\n   *    Hebrew year is always a number.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate();\n   * const hd2 = new HDate(new Date(2008, 10, 13));\n   * const hd3 = new HDate(15, 'Cheshvan', 5769);\n   * const hd4 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd5 = new HDate(733359); // ==> 15 Cheshvan 5769\n   * const monthName = 'אייר';\n   * const hd6 = new HDate(5, monthName, 5773);\n   * @param [day] - Day of month (1-30) if a `number`.\n   *   If a `Date` is specified, represents the Hebrew date corresponding to the\n   *   Gregorian date using local time.\n   *   If an `HDate` is specified, clones a copy of the given Hebrew date.\n   * @param [month] - Hebrew month of year (1=NISAN, 7=TISHREI)\n   * @param [year] - Hebrew year\n   */\n  constructor(\n    day?: number | Date | HDate | SimpleHebrewDate | undefined,\n    month?: number | string,\n    year?: number\n  ) {\n    if (arguments.length === 2 || arguments.length > 3) {\n      throw new TypeError('HDate constructor requires 0, 1 or 3 arguments');\n    }\n    if (arguments.length === 3) {\n      // Hebrew day, Hebrew month, Hebrew year\n      this.dd = this.mm = 1;\n      const yy: number =\n        typeof year === 'string' ? parseInt(year, 10) : (year as number);\n      if (isNaN(yy)) {\n        throw new TypeError(`HDate called with bad year: ${year}`);\n      }\n      this.yy = yy;\n      setMonth(this, month as string | number); // will throw if we can't parse\n      const dd: number =\n        typeof day === 'string' ? parseInt(day, 10) : (day as number);\n      if (isNaN(dd)) {\n        throw new TypeError(`HDate called with bad day: ${day}`);\n      }\n      setDate(this, dd);\n    } else {\n      // 0 arguments\n      if (typeof day === 'undefined' || day === null) {\n        day = new Date();\n      }\n      // 1 argument\n      const abs0 =\n        typeof day === 'number' && !isNaN(day)\n          ? day\n          : isDate(day)\n            ? greg2abs(day as Date)\n            : isSimpleHebrewDate(day)\n              ? day\n              : null;\n      if (abs0 === null) {\n        throw new TypeError(`HDate called with bad arg: ${day}`);\n      }\n      const isNumber = typeof abs0 === 'number';\n      const d: SimpleHebrewDate = isNumber ? abs2hebrew(abs0) : abs0;\n      this.yy = d.yy;\n      this.mm = d.mm;\n      this.dd = d.dd;\n      if (isNumber) {\n        this.rd = abs0;\n      }\n    }\n  }\n\n  /**\n   * Returns the Hebrew year of this Hebrew date\n   * @returns an integer >= 1\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getFullYear(); // 5769\n   */\n  getFullYear(): number {\n    return this.yy;\n  }\n\n  /**\n   * Returns `true` if this Hebrew date occurs during a Hebrew leap year\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.isLeapYear(); // false\n   */\n  isLeapYear(): boolean {\n    return isLeapYear(this.yy);\n  }\n\n  /**\n   * Returns the Hebrew month (1=NISAN, 7=TISHREI) of this Hebrew date\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonth(); // 8\n   */\n  getMonth(): number {\n    return this.mm;\n  }\n\n  /**\n   * The Tishrei-based month of this Hebrew date. 1 is Tishrei, 7 is Nisan, 13 is Elul in a leap year\n   * @returns an integer 1-13\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getTishreiMonth(); // 2\n   */\n  getTishreiMonth(): number {\n    const nummonths = monthsInYear(this.getFullYear());\n    return (this.getMonth() + nummonths - 6) % nummonths || nummonths;\n  }\n\n  /**\n   * Number of days in the month of this Hebrew date (29 or 30)\n   * @returns an integer 29-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.daysInMonth(); // 29\n   */\n  daysInMonth(): number {\n    return daysInMonth(this.getMonth(), this.getFullYear());\n  }\n\n  /**\n   * Gets the day within the month (1-30)\n   * @returns an integer 1-30\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 15\n   */\n  getDate(): number {\n    return this.dd;\n  }\n\n  /**\n   * Returns the day of the week for this Hebrew date,\n   * where 0 represents Sunday, 1 represents Monday, 6 represents Saturday.\n   *\n   * For the day of the month, see `getDate()`\n   * @returns an integer 0-6\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getDate(); // 4\n   */\n  getDay(): number {\n    return mod(this.abs(), 7);\n  }\n\n  /**\n   * Converts this Hebrew date to the corresponding Gregorian date.\n   *\n   * The returned `Date` object will be in the local (i.e. host system) time zone.\n   * Hours, minutes, seconds and milliseconds will all be zero.\n   *\n   * Note that this function returns the daytime portion of the date.\n   * For example, the 15th of Cheshvan 5769 began at sundown on\n   * 12 November 2008 and continues through 13 November 2008. This\n   * function would return only the date 13 November 2008.\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * const date = hd.greg(); // 13 November 2008\n   * const year = date.getFullYear(); // 2008\n   * const monthNum = date.getMonth() + 1; // 11\n   * const day = date.getDate(); // 13\n   */\n  greg(): Date {\n    return abs2greg(this.abs());\n  }\n\n  /**\n   * Converts from Hebrew date representation to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 (Gregorian).\n   * Note also that R.D. = Julian Date − 1,721,424.5\n   * @see {@link https://en.wikipedia.org/wiki/Rata_Die | Rata Die}\n   * @example\n   * const hd = new HDate(15, 'Cheshvan', 5769);\n   * hd.abs(); // 733359\n   */\n  abs(): number {\n    if (typeof this.rd !== 'number') {\n      this.rd = hebrew2abs(this.yy, this.mm, this.dd);\n    }\n    return this.rd;\n  }\n\n  /**\n   * Converts Hebrew date to R.D. (Rata Die) fixed days.\n   * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n   * Calendar.\n   * @param year Hebrew year\n   * @param month Hebrew month (1=NISAN, 7=TISHREI)\n   * @param day Hebrew date (1-30)\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.hebrew2abs(5769, months.CHESHVAN, 15); // 733359\n   */\n  static hebrew2abs(year: number, month: number, day: number): number {\n    return hebrew2abs(year, month, day);\n  }\n\n  /**\n   * Returns a transliterated Hebrew month name, e.g. `'Elul'` or `'Cheshvan'`.\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.getMonthName(); // 'Cheshvan'\n   */\n  getMonthName(): MonthName {\n    return getMonthName(this.getMonth(), this.getFullYear());\n  }\n\n  /**\n   * Renders this Hebrew date as a translated or transliterated string,\n   * including ordinal e.g. `'15th of Cheshvan, 5769'`.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * console.log(hd.render('en')); // '15th of Cheshvan, 5769'\n   * console.log(hd.render('he')); // '15 חֶשְׁוָן, 5769'\n   * console.log(hd.render('en', false)); // '15th of Cheshvan'\n   * console.log(hd.render('he', false)); // '15 חֶשְׁוָן'\n   * @param [locale] Optional locale name (defaults to active locale).\n   * @param [showYear=true] Display year (defaults to true).\n   * @see {@link Locale}\n   */\n  render(locale?: string, showYear = true): string {\n    const locale0 = locale || Locale.getLocaleName();\n    const day = this.getDate();\n    const monthName0 = Locale.gettext(this.getMonthName(), locale0);\n    const monthName = monthName0.replace(/'/g, '’');\n    const nth = Locale.ordinal(day, locale0);\n    const dayOf = getDayOfTranslation(locale0);\n    const dateStr = `${nth}${dayOf} ${monthName}`;\n    if (showYear) {\n      const fullYear = this.getFullYear();\n      return `${dateStr}, ${fullYear}`;\n    } else {\n      return dateStr;\n    }\n  }\n\n  /**\n   * Renders this Hebrew date in Hebrew gematriya, regardless of locale.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * const hd = new HDate(15, months.CHESHVAN, 5769);\n   * hd.renderGematriya(); // 'ט״ו חֶשְׁוָן תשס״ט'\n   * hd.renderGematriya(true); // 'ט״ו חשון תשס״ט'\n   */\n  renderGematriya(suppressNikud = false): string {\n    const d = this.getDate();\n    const locale = suppressNikud ? 'he-x-NoNikud' : 'he';\n    const m = Locale.gettext(this.getMonthName(), locale);\n    const y = this.getFullYear();\n    return gematriya(d) + ' ' + m + ' ' + gematriya(y);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).before(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  before(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, -1);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or before** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrBefore(6).greg() // Sat Feb 15 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrBefore(6).greg() // Sat Feb 22 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrBefore(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 0);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **nearest** to this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).nearest(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Tuesday February 18, 2014')).nearest(6).greg() // Sat Feb 15 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  nearest(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 3);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **on or after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).onOrAfter(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Sunday February 23, 2014')).onOrAfter(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  onOrAfter(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 6);\n  }\n\n  /**\n   * Returns an `HDate` corresponding to the specified day of week\n   * **after** this Hebrew date\n   * @example\n   * new HDate(new Date('Wednesday February 19, 2014')).after(6).greg() // Sat Feb 22 2014\n   * new HDate(new Date('Saturday February 22, 2014')).after(6).greg() // Sat Mar 01 2014\n   * new HDate(new Date('Sunday February 23, 2014')).after(6).greg() // Sat Mar 01 2014\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  after(dayOfWeek: number): HDate {\n    return onOrBefore(dayOfWeek, this, 7);\n  }\n\n  /**\n   * Returns the next Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.next(); // '16 Cheshvan 5769'\n   */\n  next(): HDate {\n    return new HDate(this.abs() + 1);\n  }\n\n  /**\n   * Returns the previous Hebrew date\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.prev(); // '14 Cheshvan 5769'\n   */\n  prev(): HDate {\n    return new HDate(this.abs() - 1);\n  }\n\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time added\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   */\n  add(amount: number | string, units: FlexibleTimeUnit = 'd'): HDate {\n    amount =\n      typeof amount === 'string' ? parseInt(amount, 10) : (amount as number);\n    if (!amount) {\n      return new HDate(this);\n    }\n    units = standardizeUnits(units);\n    if (units === UNITS_DAY) {\n      return new HDate(this.abs() + amount);\n    } else if (units === UNITS_WEEK) {\n      return new HDate(this.abs() + 7 * amount);\n    } else if (units === UNITS_YEAR) {\n      return new HDate(\n        this.getDate(),\n        this.getMonth(),\n        this.getFullYear() + amount\n      );\n    } else {\n      // units === UNITS_MONTH\n      let hd = new HDate(this);\n      const sign = amount > 0 ? 1 : -1;\n      amount = Math.abs(amount);\n      for (let i = 0; i < amount; i++) {\n        hd = new HDate(hd.abs() + sign * hd.daysInMonth());\n      }\n      return hd;\n    }\n  }\n\n  /**\n   * Returns a cloned `HDate` object with a specified amount of time subracted\n   *\n   * Units are case insensitive, and support plural and short forms.\n   * Note, short forms are case sensitive.\n   *\n   * | Unit | Shorthand | Description\n   * | --- | --- | --- |\n   * | `day` | `d` | days |\n   * | `week` | `w` | weeks |\n   * | `month` | `M` | months |\n   * | `year` | `y` | years |\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(15, months.CHESHVAN, 5769);\n   * const hd2 = hd1.add(1, 'weeks'); // 7 Kislev 5769\n   * const hd3 = hd1.add(-3, 'M'); // 30 Av 5768\n   */\n  subtract(amount: number, units: FlexibleTimeUnit = 'd'): HDate {\n    return this.add(amount * -1, units);\n  }\n\n  /**\n   * Returns the difference in days between the two given HDates.\n   *\n   * The result is positive if `this` date is comes chronologically\n   * after the `other` date, and negative\n   * if the order of the two dates is reversed.\n   *\n   * The result is zero if the two dates are identical.\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   *\n   * const hd1 = new HDate(25, months.KISLEV, 5770);\n   * const hd2 = new HDate(15, months.CHESHVAN, 5769);\n   * const days = hd1.deltaDays(hd2); // 394\n   * @param other Hebrew date to compare\n   */\n  deltaDays(other: HDate): number {\n    return this.abs() - other.abs();\n  }\n\n  /**\n   * Compares this Hebrew date to another date, returning `true` if the dates match.\n   * @param other Hebrew date to compare\n   * @example\n   * const hd1 = new HDate(new Date(2008, 10, 13));\n   * const hd2 = new HDate(15, 'Cheshvan', 5769);\n   * hd1.isSameDate(hd2); // true\n   */\n  isSameDate(other: HDate): boolean {\n    return this.yy === other.yy && this.mm === other.mm && this.dd === other.dd;\n  }\n\n  /**\n   * Returns a string representation of this Hebrew date using English transliterations\n   * @example\n   * const hd = new HDate(new Date(2008, 10, 13)); // 15 Cheshvan 5769\n   * hd.toString(); // '15 Cheshvan 5769'\n   */\n  toString(): string {\n    const day = this.getDate();\n    const fullYear = this.getFullYear();\n    const monthName = this.getMonthName();\n    return `${day} ${monthName} ${fullYear}`;\n  }\n\n  /**\n   * Returns true if Hebrew year is a leap year\n   * @param year Hebrew year\n   * @example\n   * HDate.isLeapYear(5783); // false\n   * HDate.isLeapYear(5784); // true\n   */\n  static isLeapYear(year: number): boolean {\n    return isLeapYear(year);\n  }\n\n  /**\n   * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n   * @param year Hebrew year\n   * @example\n   * HDate.monthsInYear(5783); // 12\n   * HDate.monthsInYear(5784); // 13\n   */\n  static monthsInYear(year: number): number {\n    return monthsInYear(year);\n  }\n\n  /**\n   * Number of days in Hebrew month in a given year (29 or 30)\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.daysInMonth(months.CHESHVAN, 5769); // 29\n   */\n  static daysInMonth(month: number, year: number): number {\n    return daysInMonth(month, year);\n  }\n\n  /**\n   * Returns a transliterated string name of Hebrew month in year,\n   * for example 'Elul' or 'Cheshvan'.\n   * @param month Hebrew month (e.g. months.TISHREI)\n   * @param year Hebrew year\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.getMonthName(months.CHESHVAN, 5769); // 'Cheshvan'\n   */\n  static getMonthName(month: number, year: number): MonthName {\n    return getMonthName(month, year);\n  }\n\n  /**\n   * Returns the Hebrew month number (NISAN=1, TISHREI=7)\n   * @param month A number, or Hebrew month name string\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthNum(months.CHESHVAN); // 8\n   * HDate.monthNum('Cheshvan'); // 8\n   * HDate.monthNum('חשון'); // 8\n   */\n  static monthNum(month: number | string): number {\n    if (typeof month === 'number') {\n      if (isNaN(month) || month > 14) {\n        throw new RangeError(`bad monthNum: ${month}`);\n      }\n      return month;\n    }\n    return month.charCodeAt(0) >= 48 && month.charCodeAt(0) <= 57 /* number */\n      ? parseInt(month, 10)\n      : monthFromName(month);\n  }\n\n  /**\n   * Number of days in the Hebrew year.\n   * Regular years can have 353, 354, or 355 days.\n   * Leap years can have 383, 384, or 385 days.\n   * @param year Hebrew year\n   * @example\n   * HDate.daysInYear(5783); // 355\n   * HDate.daysInYear(5784); // 383\n   */\n  static daysInYear(year: number): number {\n    return daysInYear(year);\n  }\n\n  /**\n   * true if Cheshvan is long in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.longCheshvan(5783); // true\n   * HDate.longCheshvan(5784); // false\n   */\n  static longCheshvan(year: number): boolean {\n    return longCheshvan(year);\n  }\n\n  /**\n   * true if Kislev is short in Hebrew year\n   * @param year Hebrew year\n   * @example\n   * HDate.shortKislev(5783); // false\n   * HDate.shortKislev(5784); // true\n   */\n  static shortKislev(year: number): boolean {\n    return shortKislev(year);\n  }\n\n  /**\n   * Converts Hebrew month string name to numeric\n   * @example\n   * import {HDate, months} from '@hebcal/hdate';\n   * HDate.monthFromName(months.CHESHVAN); // 8\n   * HDate.monthFromName('Cheshvan'); // 8\n   * HDate.monthFromName('חשון'); // 8\n   */\n  static monthFromName(monthName: string | number): number {\n    return monthFromName(monthName);\n  }\n\n  /**\n   * Convenience function for determining the R.D. date\n   * near a specified R.D. date, corresponding to the specified day of week.\n   *\n   * Note: Applying this function to d+6 gives us the `dayOfWeek` on or after an\n   * absolute day d. Similarly, applying it to d+3 gives the `dayOfWeek` nearest to\n   * absolute date d, applying it to d-1 gives the `dayOfWeek` previous to absolute\n   * date d, and applying it to d+7 gives the `dayOfWeek` following absolute date d.\n   * @param dayOfWeek day of week: Sunday=0, Saturday=6\n   */\n  static dayOnOrBefore(dayOfWeek: number, absdate: number): number {\n    return absdate - ((absdate - dayOfWeek) % 7);\n  }\n\n  /**\n   * Tests if the object is an instance of `HDate`\n   * @example\n   * HDate.isHDate(new HDate()); // true\n   * HDate.isHDate(new Date()); // false\n   * HDate.isHDate(null); // false\n   * HDate.isHDate(12345); // false\n   * HDate.isHDate('15 Cheshvan 5769'); // false\n   */\n  static isHDate(obj: any): boolean {\n    return (\n      obj !== null &&\n      typeof obj === 'object' &&\n      typeof obj.yy === 'number' &&\n      typeof obj.mm === 'number' &&\n      typeof obj.dd === 'number' &&\n      typeof obj.greg === 'function' &&\n      typeof obj.abs === 'function'\n    );\n  }\n\n  /**\n   * Construct a new instance of `HDate` from a Gematriya-formatted string\n   * @example\n   * HDate.fromGematriyaString('כ״ז בְּתַמּוּז תשפ״ג') // 27 Tamuz 5783\n   * HDate.fromGematriyaString('כ׳ סיון תש״ד') // 20 Sivan 5704\n   * HDate.fromGematriyaString('ה׳ אִיָיר תש״ח') // 5 Iyyar 5708\n   */\n  static fromGematriyaString(str: string, currentThousands = 5000): HDate {\n    const parts = str.split(' ').filter(x => x.length !== 0);\n    const numParts = parts.length;\n    if (numParts !== 3 && numParts !== 4) {\n      throw new RangeError(`cannot parse gematriya str: \"${str}\"`);\n    }\n    const day = gematriyaStrToNum(parts[0]);\n    const monthStr = numParts === 3 ? parts[1] : parts[1] + ' ' + parts[2];\n    const month = monthFromName(monthStr);\n    const yearStr = numParts === 3 ? parts[2] : parts[3];\n    let year = gematriyaStrToNum(yearStr);\n    if (year < 1000) {\n      year += currentThousands;\n    }\n    return new HDate(day, month, year);\n  }\n}\n\nfunction standardizeUnits(units: FlexibleTimeUnit): TimeUnit {\n  switch (units) {\n    case 'd':\n      return UNITS_DAY;\n    case 'w':\n      return UNITS_WEEK;\n    case 'M':\n      return UNITS_MONTH;\n    case 'y':\n      return UNITS_YEAR;\n  }\n  const str = String(units || '')\n    .toLowerCase()\n    .replace(/s$/, '');\n  switch (str) {\n    case UNITS_DAY:\n    case UNITS_WEEK:\n    case UNITS_MONTH:\n    case UNITS_YEAR:\n      return str;\n  }\n  throw new TypeError(`Invalid units '${units}'`);\n}\n\nfunction getDayOfTranslation(locale: string): string {\n  switch (locale) {\n    case 'en':\n    case 's':\n    case 'a':\n    case 'ashkenazi':\n      return ' of';\n    default:\n      break;\n  }\n  const ofStr = Locale.lookupTranslation('of', locale);\n  if (ofStr) {\n    return ' ' + ofStr;\n  }\n  if (locale.startsWith('ashkenazi')) {\n    return ' of';\n  }\n  return '';\n}\n\n/**\n * Sets the day of the month of the date. Returns the object it was called upon\n * @private\n * @param month A number, or Hebrew month name string\n */\nfunction setMonth(hd: HDate, month: number | string): HDate {\n  hd.mm = HDate.monthNum(month);\n  fix(hd);\n  return hd;\n}\n\nfunction setDate(hd: HDate, date: number): HDate {\n  hd.dd = date;\n  fix(hd);\n  return hd;\n}\n\nfunction fix(hd: HDate) {\n  fixMonth(hd);\n  fixDate(hd);\n}\n\nfunction fixDate(hd: HDate) {\n  if (hd.dd < 1) {\n    if (hd.mm === months.TISHREI) {\n      hd.yy -= 1;\n    }\n    hd.dd += daysInMonth(hd.mm, hd.yy);\n    hd.mm -= 1;\n    fix(hd);\n  }\n  if (hd.dd > daysInMonth(hd.mm, hd.yy)) {\n    if (hd.mm === months.ELUL) {\n      hd.yy += 1;\n    }\n    hd.dd -= daysInMonth(hd.mm, hd.yy);\n    if (hd.mm === monthsInYear(hd.yy)) {\n      hd.mm = 1; // rollover to NISAN\n    } else {\n      hd.mm += 1;\n    }\n    fix(hd);\n  }\n  fixMonth(hd);\n}\n\nfunction fixMonth(hd: HDate) {\n  if (hd.mm === months.ADAR_II && !hd.isLeapYear()) {\n    hd.mm -= 1; // to Adar I\n    fix(hd);\n  } else if (hd.mm < 1) {\n    hd.mm += monthsInYear(hd.yy);\n    hd.yy -= 1;\n    fix(hd);\n  } else if (hd.mm > monthsInYear(hd.yy)) {\n    hd.mm -= monthsInYear(hd.yy);\n    hd.yy += 1;\n    fix(hd);\n  }\n  delete hd.rd;\n}\n\nfunction onOrBefore(day: number, t: HDate, offset: number): HDate {\n  return new HDate(HDate.dayOnOrBefore(day, t.abs() + offset));\n}\n"],"names":[],"mappings":"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"}