{"version":3,"file":"greg.js","sources":["../../../src/greg.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace, no-inner-declarations */\n/** @private */\nconst lengths: number[] = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/** @private */\nconst monthLengths: number[][] = [lengths, lengths.slice()];\nmonthLengths[1][2] = 29;\n\n/**\n * @private\n */\nfunction mod(x: number, y: number): number {\n  return x - y * Math.floor(x / y);\n}\n\n/**\n * @private\n */\nfunction quotient(x: number, y: number): number {\n  return Math.floor(x / y);\n}\n\n/**\n * @private\n * @param abs - R.D. number of days\n */\nfunction yearFromFixed(abs: number): number {\n  const l0: number = abs - 1;\n  const n400: number = quotient(l0, 146097);\n  const d1: number = mod(l0, 146097);\n  const n100: number = quotient(d1, 36524);\n  const d2: number = mod(d1, 36524);\n  const n4: number = quotient(d2, 1461);\n  const d3: number = mod(d2, 1461);\n  const n1: number = quotient(d3, 365);\n  const year: number = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n  return n100 !== 4 && n1 !== 4 ? year + 1 : year;\n}\n/*\nconst ABS_14SEP1752 = 639797;\nconst ABS_2SEP1752 = 639785;\n*/\n\n/*\n * Formerly in namespace, now top-level\n */\n\n/**\n * Returns true if the Gregorian year is a leap year\n * @param year Gregorian year\n */\nexport function isGregLeapYear(year: number): boolean {\n  return !(year % 4) && (!!(year % 100) || !(year % 400));\n}\n\n/**\n * Number of days in the Gregorian month for given year\n * @param month Gregorian month (1=January, 12=December)\n * @param year Gregorian year\n */\nexport function daysInGregMonth(month: number, year: number): number {\n  // 1 based months\n  return monthLengths[+isGregLeapYear(year)][month];\n}\n\n/**\n * Returns true if the object is a Javascript Date\n */\nexport function isDate(obj: unknown): boolean {\n  // eslint-disable-next-line no-prototype-builtins\n  return typeof obj === 'object' && Date.prototype.isPrototypeOf(obj as object);\n}\n\n/**\n * @private\n * @param year\n * @param month (1-12)\n * @param day (1-31)\n */\nfunction toFixed(year: number, month: number, day: number): number {\n  const py: number = year - 1;\n  return (\n    365 * py +\n    quotient(py, 4) -\n    quotient(py, 100) +\n    quotient(py, 400) +\n    quotient(367 * month - 362, 12) +\n    (month <= 2 ? 0 : isGregLeapYear(year) ? -1 : -2) +\n    day\n  );\n}\n\n/**\n * Converts Gregorian date to absolute R.D. (Rata Die) days\n * @param date Gregorian date\n */\nexport function greg2abs(date: Date): number {\n  if (!isDate(date)) {\n    throw new TypeError(`not a Date: ${date}`);\n  } else if (isNaN(date.getTime())) {\n    throw new RangeError('Invalid Date');\n  }\n  const abs = toFixed(date.getFullYear(), date.getMonth() + 1, date.getDate());\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${date}`);\n    }\n    */\n  return abs;\n}\n\n/**\n * Converts from Rata Die (R.D. number) to Gregorian date.\n * See the footnote on page 384 of ``Calendrical Calculations, Part II:\n * Three Historical Calendars'' by E. M. Reingold,  N. Dershowitz, and S. M.\n * Clamen, Software--Practice and Experience, Volume 23, Number 4\n * (April, 1993), pages 383-404 for an explanation.\n *\n * Note that this function returns the daytime portion of the date.\n * For example, the 15th of Cheshvan 5769 began at sundown on\n * 12 November 2008 and continues through 13 November 2008. This\n * function would return only the date 13 November 2008.\n * @param abs - R.D. number of days\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n * const date = abs2greg(abs); // 13 November 2008\n * const year = date.getFullYear(); // 2008\n * const monthNum = date.getMonth() + 1; // 11\n * const day = date.getDate(); // 13\n */\nexport function abs2greg(abs: number): Date {\n  if (typeof abs !== 'number' || isNaN(abs)) {\n    throw new TypeError(`not a Number: ${abs}`);\n  }\n  abs = Math.trunc(abs);\n  /*\n    if (abs < ABS_14SEP1752 && abs > ABS_2SEP1752) {\n      throw new RangeError(`Invalid Date: ${abs}`);\n    }\n    */\n  const year: number = yearFromFixed(abs);\n  const priorDays: number = abs - toFixed(year, 1, 1);\n  const correction: number =\n    abs < toFixed(year, 3, 1) ? 0 : isGregLeapYear(year) ? 1 : 2;\n  const month: number = quotient(12 * (priorDays + correction) + 373, 367);\n  const day: number = abs - toFixed(year, month, 1) + 1;\n  const dt: Date = new Date(year, month - 1, day);\n  if (year < 100 && year >= 0) {\n    dt.setFullYear(year);\n  }\n  return dt;\n}\n"],"names":[],"mappings":"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"}