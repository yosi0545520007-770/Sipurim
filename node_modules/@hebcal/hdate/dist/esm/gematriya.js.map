{"version":3,"file":"gematriya.js","sources":["../../../src/gematriya.ts"],"sourcesContent":["const GERESH = '׳';\nconst GERSHAYIM = '״';\n\nconst heb2num: Record<string, number> = {\n  א: 1,\n  ב: 2,\n  ג: 3,\n  ד: 4,\n  ה: 5,\n  ו: 6,\n  ז: 7,\n  ח: 8,\n  ט: 9,\n  י: 10,\n  כ: 20,\n  ל: 30,\n  מ: 40,\n  נ: 50,\n  ס: 60,\n  ע: 70,\n  פ: 80,\n  צ: 90,\n  ק: 100,\n  ר: 200,\n  ש: 300,\n  ת: 400,\n} as const;\n\nconst num2heb: Record<number, string> = {};\nfor (const [key, val] of Object.entries(heb2num)) {\n  num2heb[val] = key;\n}\n\nfunction num2digits(num: number): number[] {\n  const digits: number[] = [];\n  while (num > 0) {\n    if (num === 15 || num === 16) {\n      digits.push(9);\n      digits.push(num - 9);\n      break;\n    }\n    let incr = 100;\n    let i;\n    for (i = 400; i > num; i -= incr) {\n      if (i === incr) {\n        incr = incr / 10;\n      }\n    }\n    digits.push(i);\n    num -= i;\n  }\n  return digits;\n}\n\n/**\n * Converts a numerical value to a string of Hebrew letters.\n *\n * When specifying years of the Hebrew calendar in the present millennium,\n * we omit the thousands (which is presently 5 [ה]).\n * @example\n * gematriya(5774) // 'תשע״ד' - cropped to 774\n * gematriya(25) // 'כ״ה'\n * gematriya(60) // 'ס׳'\n * gematriya(3761) // 'ג׳תשס״א'\n * gematriya(1123) // 'א׳קכ״ג'\n */\nexport function gematriya(num: number | string): string {\n  const num1 = parseInt(num as string, 10);\n  if (!num1 || num1 < 0) {\n    throw new TypeError(`invalid number: ${num}`);\n  }\n  let str = '';\n  const thousands = Math.floor(num1 / 1000);\n  if (thousands > 0 && thousands !== 5) {\n    const tdigits = num2digits(thousands);\n    for (const tdig of tdigits) {\n      str += num2heb[tdig];\n    }\n    str += GERESH;\n  }\n  const digits = num2digits(num1 % 1000);\n  if (digits.length === 1) {\n    return str + num2heb[digits[0]] + GERESH;\n  }\n  for (let i = 0; i < digits.length; i++) {\n    if (i + 1 === digits.length) {\n      str += GERSHAYIM;\n    }\n    str += num2heb[digits[i]];\n  }\n  return str;\n}\n\n/**\n * Converts a string of Hebrew letters to a numerical value.\n *\n * Only considers the value of Hebrew letters `א` through `ת`.\n * Ignores final Hebrew letters such as `ך` (kaf sofit) or `ם` (mem sofit)\n * and vowels (nekudot).\n */\nexport function gematriyaStrToNum(str: string): number {\n  let num = 0;\n  const gereshIdx: number = str.indexOf(GERESH);\n  if (gereshIdx !== -1 && gereshIdx !== str.length - 1) {\n    const thousands = str.substring(0, gereshIdx);\n    num += gematriyaStrToNum(thousands) * 1000;\n    str = str.substring(gereshIdx);\n  }\n  for (const ch of str) {\n    const n: number | undefined = heb2num[ch];\n    if (typeof n === 'number') {\n      num += n;\n    }\n  }\n  return num;\n}\n"],"names":[],"mappings":"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"}