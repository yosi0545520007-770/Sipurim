{"version":3,"file":"hdateBase.js","sources":["../../../src/hdateBase.ts"],"sourcesContent":["/*\n * More minimal HDate\n */\nimport {hebrewStripNikkud} from './hebrewStripNikkud';\n\nconst NISAN = 1;\nconst IYYAR = 2;\nconst SIVAN = 3;\nconst TAMUZ = 4;\nconst AV = 5;\nconst ELUL = 6;\nconst TISHREI = 7;\nconst CHESHVAN = 8;\nconst KISLEV = 9;\nconst TEVET = 10;\nconst SHVAT = 11;\nconst ADAR_I = 12;\nconst ADAR_II = 13;\n\n/**\n * Hebrew months of the year (NISAN=1, TISHREI=7)\n * @readonly\n * @enum {number}\n */\nexport const months = {\n  /** Nissan / ניסן */\n  NISAN,\n  /** Iyyar / אייר */\n  IYYAR,\n  /** Sivan / סיון */\n  SIVAN,\n  /** Tamuz (sometimes Tammuz) / תמוז */\n  TAMUZ,\n  /** Av / אב */\n  AV,\n  /** Elul / אלול */\n  ELUL,\n  /** Tishrei / תִּשְׁרֵי */\n  TISHREI,\n  /** Cheshvan / חשון */\n  CHESHVAN,\n  /** Kislev / כסלו */\n  KISLEV,\n  /** Tevet / טבת */\n  TEVET,\n  /** Sh'vat / שבט */\n  SHVAT,\n  /** Adar or Adar Rishon / אדר */\n  ADAR_I,\n  /** Adar Sheini (only on leap years) / אדר ב׳ */\n  ADAR_II,\n} as const;\n\nconst NISAN_STR = 'Nisan';\nconst monthNames0 = [\n  '',\n  NISAN_STR,\n  'Iyyar',\n  'Sivan',\n  'Tamuz',\n  'Av',\n  'Elul',\n  'Tishrei',\n  'Cheshvan',\n  'Kislev',\n  'Tevet',\n  \"Sh'vat\",\n] as const;\n\n/*\n * Transliterations of Hebrew month names.\n * Regular years are index 0 and leap years are index 1.\n * @private\n */\nconst monthNames = [\n  [...monthNames0, 'Adar', NISAN_STR],\n  [...monthNames0, 'Adar I', 'Adar II', NISAN_STR],\n] as const;\n\n/** Transliterated Hebrew month names. */\nexport type MonthName =\n  | 'Nisan'\n  | 'Iyyar'\n  | 'Sivan'\n  | 'Tamuz'\n  | 'Av'\n  | 'Elul'\n  | 'Tishrei'\n  | 'Cheshvan'\n  | 'Kislev'\n  | 'Tevet'\n  | \"Sh'vat\"\n  | 'Adar'\n  | 'Adar I'\n  | 'Adar II';\n\nconst edCache: Map<number, number> = new Map<number, number>();\n\nconst EPOCH = -1373428;\n// Avg year length in the cycle (19 solar years with 235 lunar months)\nconst AVG_HEBYEAR_DAYS = 365.24682220597794;\n\n/**\n * @private\n */\nfunction assertNumber(n: unknown, name: string) {\n  if (typeof n !== 'number' || isNaN(n)) {\n    throw new TypeError(`param '${name}' not a number: ${n}`);\n  }\n}\n\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n * @param year Hebrew year\n * @param month Hebrew month\n * @param day Hebrew date (1-30)\n * @example\n * const abs = hebrew2abs(5769, months.CHESHVAN, 15);\n */\nexport function hebrew2abs(year: number, month: number, day: number): number {\n  assertNumber(year, 'year');\n  assertNumber(month, 'month');\n  assertNumber(day, 'day');\n\n  if (year < 1) {\n    throw new RangeError(`hebrew2abs: invalid year ${year}`);\n  }\n\n  let tempabs: number = day;\n\n  if (month < TISHREI) {\n    for (let m = TISHREI; m <= monthsInYear(year); m++) {\n      tempabs += daysInMonth(m, year);\n    }\n    for (let m = NISAN; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  } else {\n    for (let m = TISHREI; m < month; m++) {\n      tempabs += daysInMonth(m, year);\n    }\n  }\n\n  return EPOCH + elapsedDays(year) + tempabs - 1;\n}\n\n/**\n * Converts Hebrew date to R.D. (Rata Die) fixed days.\n * R.D. 1 is the imaginary date Monday, January 1, 1 on the Gregorian\n * Calendar.\n */\nexport function hd2abs(hdate: SimpleHebrewDate): number {\n  return hebrew2abs(hdate.yy, hdate.mm, hdate.dd);\n}\n\n/**\n * @private\n */\nfunction newYear(year: number): number {\n  return EPOCH + elapsedDays(year);\n}\n\nexport type SimpleHebrewDate = {\n  /** Hebrew year */\n  yy: number;\n  /** Hebrew month of year (1=NISAN, 7=TISHREI) */\n  mm: number;\n  /** Day of month (1-30) */\n  dd: number;\n};\n\n/**\n * Converts absolute R.D. days to Hebrew date\n * @param abs absolute R.D. days\n */\nexport function abs2hebrew(abs: number): SimpleHebrewDate {\n  assertNumber(abs, 'abs');\n  abs = Math.trunc(abs);\n  if (abs <= EPOCH) {\n    throw new RangeError(`abs2hebrew: ${abs} is before epoch`);\n  }\n  // first, quickly approximate year\n  let year = Math.floor((abs - EPOCH) / AVG_HEBYEAR_DAYS);\n  while (newYear(year) <= abs) {\n    ++year;\n  }\n  --year;\n\n  let month = abs < hebrew2abs(year, 1, 1) ? 7 : 1;\n  while (abs > hebrew2abs(year, month, daysInMonth(month, year))) {\n    ++month;\n  }\n\n  const day = 1 + abs - hebrew2abs(year, month, 1);\n  return {yy: year, mm: month, dd: day};\n}\n\n/**\n * Returns true if Hebrew year is a leap year\n * @param year Hebrew year\n */\nexport function isLeapYear(year: number): boolean {\n  return (1 + year * 7) % 19 < 7;\n}\n\n/**\n * Number of months in this Hebrew year (either 12 or 13 depending on leap year)\n * @param year Hebrew year\n */\nexport function monthsInYear(year: number): number {\n  return 12 + +isLeapYear(year); // boolean is cast to 1 or 0\n}\n\n/**\n * Number of days in Hebrew month in a given year (29 or 30)\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nexport function daysInMonth(month: number, year: number): number {\n  switch (month) {\n    case IYYAR:\n    case TAMUZ:\n    case ELUL:\n    case TEVET:\n    case ADAR_II:\n      return 29;\n    default:\n      break;\n  }\n  if (\n    (month === ADAR_I && !isLeapYear(year)) ||\n    (month === CHESHVAN && !longCheshvan(year)) ||\n    (month === KISLEV && shortKislev(year))\n  ) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\n/**\n * Returns a transliterated string name of Hebrew month in year,\n * for example 'Elul' or 'Cheshvan'.\n * @param month Hebrew month (e.g. months.TISHREI)\n * @param year Hebrew year\n */\nexport function getMonthName(month: number, year: number): MonthName {\n  assertNumber(month, 'month');\n  assertNumber(year, 'year');\n  if (month < 1 || month > 14) {\n    throw new TypeError(`bad monthNum: ${month}`);\n  }\n  return monthNames[+isLeapYear(year)][month] as MonthName;\n}\n\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @param year Hebrew year\n */\nexport function elapsedDays(year: number): number {\n  const n = edCache.get(year);\n  if (typeof n === 'number') {\n    return n;\n  }\n  const elapsed: number = elapsedDays0(year);\n  edCache.set(year, elapsed);\n  return elapsed;\n}\n\n/**\n * Days from sunday prior to start of Hebrew calendar to mean\n * conjunction of Tishrei in Hebrew YEAR\n * @private\n * @param year Hebrew year\n */\nfunction elapsedDays0(year: number): number {\n  const prevYear: number = year - 1;\n  const mElapsed: number =\n    235 * Math.floor(prevYear / 19) + // Months in complete 19 year lunar (Metonic) cycles so far\n    12 * (prevYear % 19) + // Regular months in this cycle\n    Math.floor(((prevYear % 19) * 7 + 1) / 19); // Leap months this cycle\n\n  const pElapsed: number = 204 + 793 * (mElapsed % 1080);\n\n  const hElapsed: number =\n    5 +\n    12 * mElapsed +\n    793 * Math.floor(mElapsed / 1080) +\n    Math.floor(pElapsed / 1080);\n\n  const parts: number = (pElapsed % 1080) + 1080 * (hElapsed % 24);\n\n  const day: number = 1 + 29 * mElapsed + Math.floor(hElapsed / 24);\n  let altDay: number = day;\n\n  if (\n    parts >= 19440 ||\n    (2 === day % 7 && parts >= 9924 && !isLeapYear(year)) ||\n    (1 === day % 7 && parts >= 16789 && isLeapYear(prevYear))\n  ) {\n    altDay++;\n  }\n\n  if (altDay % 7 === 0 || altDay % 7 === 3 || altDay % 7 === 5) {\n    return altDay + 1;\n  } else {\n    return altDay;\n  }\n}\n\n/**\n * Number of days in the hebrew YEAR.\n * A common Hebrew calendar year can have a length of 353, 354 or 355 days\n * A leap Hebrew calendar year can have a length of 383, 384 or 385 days\n * @param year Hebrew year\n */\nexport function daysInYear(year: number): number {\n  return elapsedDays(year + 1) - elapsedDays(year);\n}\n\n/**\n * true if Cheshvan is long in Hebrew year\n * @param year Hebrew year\n */\nexport function longCheshvan(year: number): boolean {\n  return daysInYear(year) % 10 === 5;\n}\n\n/**\n * true if Kislev is short in Hebrew year\n * @param year Hebrew year\n */\nexport function shortKislev(year: number): boolean {\n  return daysInYear(year) % 10 === 3;\n}\n\n/**\n * Converts Hebrew month string name to numeric\n * @param monthName monthName\n */\nexport function monthFromName(monthName: string | number): number {\n  if (typeof monthName === 'number') {\n    if (isNaN(monthName) || monthName < 1 || monthName > 14) {\n      throw new RangeError(`bad monthName: ${monthName}`);\n    }\n    return monthName;\n  }\n  let c = monthName.trim().toLowerCase();\n  // remove all niqud and trailing gershayim (for Adar Alef/Bet)\n  c = hebrewStripNikkud(c).replace(/׳$/, '');\n  // If Hebrew month starts with a bet (for example `בתמוז`) then ignore it\n  if (c[0] === 'ב') {\n    c = c.substring(1);\n  }\n  /*\n  the Hebrew months are unique to their second letter\n  N         Nisan  (November?)\n  I         Iyyar\n  E        Elul\n  C        Cheshvan\n  K        Kislev\n  1        1Adar\n  2        2Adar\n  Si Sh     Sivan, Shvat\n  Ta Ti Te Tamuz, Tishrei, Tevet\n  Av Ad    Av, Adar\n\n  אב אד אי אל   אב אדר אייר אלול\n  ח            חשון\n  ט            טבת\n  כ            כסלו\n  נ            ניסן\n  ס            סיון\n  ש            שבט\n  תמ תש        תמוז תשרי\n  */\n  switch (c[0]) {\n    case 'n':\n    case 'נ':\n      if (c[1] === 'o') {\n        break; /* this catches \"november\" */\n      }\n      return NISAN;\n    case 'i':\n      return IYYAR;\n    case 'e':\n      return ELUL;\n    case 'c':\n    case 'ח':\n      return CHESHVAN;\n    case 'k':\n    case 'כ':\n      return KISLEV;\n    case 's':\n      switch (c[1]) {\n        case 'i':\n          return SIVAN;\n        case 'h':\n          return SHVAT;\n        default:\n          break;\n      }\n      break;\n    case 't':\n      switch (c[1]) {\n        case 'a':\n          return TAMUZ;\n        case 'i':\n          return TISHREI;\n        case 'e':\n          return TEVET;\n        default:\n          break;\n      }\n      break;\n    case 'a':\n      switch (c[1]) {\n        case 'v':\n          return AV;\n        case 'd':\n          if (/(1|[^i]i|a|א)$/i.test(c)) {\n            return ADAR_I;\n          }\n          return ADAR_II; // else assume sheini\n        default:\n          break;\n      }\n      break;\n    case 'ס':\n      return SIVAN;\n    case 'ט':\n      return TEVET;\n    case 'ש':\n      return SHVAT;\n    case 'א':\n      switch (c[1]) {\n        case 'ב':\n          return AV;\n        case 'ד':\n          if (/(1|[^i]i|a|א)$/i.test(c)) {\n            return ADAR_I;\n          }\n          return ADAR_II; // else assume sheini\n        case 'י':\n          return IYYAR;\n        case 'ל':\n          return ELUL;\n        default:\n          break;\n      }\n      break;\n    case 'ת':\n      switch (c[1]) {\n        case 'מ':\n          return TAMUZ;\n        case 'ש':\n          return TISHREI;\n        default:\n          break;\n      }\n      break;\n  }\n  throw new RangeError(`bad monthName: ${monthName}`);\n}\n"],"names":[],"mappings":"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"}